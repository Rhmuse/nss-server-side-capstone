// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231025190008_extraPropOnBurgerToppings")]
    partial class extraPropOnBurgerToppings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            IsDeleted = false,
                            OrderId = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            IsDeleted = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            IsDeleted = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2561731d-e253-43e5-a2ec-eae96334b5d2"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("efd1e2df-888f-4ccb-a237-6f5ea21cefe0")
                        },
                        new
                        {
                            Id = new Guid("47363598-8aa6-4c4f-96a9-ff72e5179e77"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("2dd66e1e-66ca-4b68-8fc7-5858e477488a")
                        },
                        new
                        {
                            Id = new Guid("4d1e91c0-b173-4c9b-a3ec-507d9d745fa4"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("9210eeb1-8dc6-49d8-a423-132617edcd10")
                        },
                        new
                        {
                            Id = new Guid("e6f5c472-bfc8-4f47-88ad-0c62900d3c02"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("29ff0a1f-97aa-4772-8904-d49220db3694")
                        },
                        new
                        {
                            Id = new Guid("9f096de8-0aaf-40b5-90a8-4244b0aa2cea"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("2dcf6d43-60e4-40e3-a4c9-5863f5643cef")
                        },
                        new
                        {
                            Id = new Guid("1885c014-29ca-4dd0-a0c8-4e94d138e553"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("f3fbf0eb-ef16-40c1-9bdc-0a7123176f08")
                        },
                        new
                        {
                            Id = new Guid("a1885878-24c0-4c22-ab2b-23ce9dfd88f0"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("f3fbf0eb-ef16-40c1-9bdc-0a7123176f08")
                        },
                        new
                        {
                            Id = new Guid("38d5b069-3417-4610-8ed4-a7f26598b9ac"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("eb335c98-4143-4844-80fc-eb45f545b3b5")
                        },
                        new
                        {
                            Id = new Guid("d563c5ac-b611-4875-b684-1069a26d09d8"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("a3a2a614-9f7e-49bd-ab04-f5a65823b5b1")
                        },
                        new
                        {
                            Id = new Guid("d289eae4-770d-4721-9311-58d9307c8711"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Extra = false,
                            ToppingId = new Guid("8e0ef6b8-8979-46e8-9425-88d05b7083b3")
                        },
                        new
                        {
                            Id = new Guid("110757cd-d608-4d8f-8e47-b8a035db3b5b"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("efd1e2df-888f-4ccb-a237-6f5ea21cefe0")
                        },
                        new
                        {
                            Id = new Guid("0af13366-e466-420f-ab9a-d0fd0972a6cb"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("2dd66e1e-66ca-4b68-8fc7-5858e477488a")
                        },
                        new
                        {
                            Id = new Guid("7771be65-f28f-476b-9015-bd61a571cef3"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("9210eeb1-8dc6-49d8-a423-132617edcd10")
                        },
                        new
                        {
                            Id = new Guid("74cfe159-1cac-4e35-a0a9-e6e798b80e20"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("29ff0a1f-97aa-4772-8904-d49220db3694")
                        },
                        new
                        {
                            Id = new Guid("814c2240-ef20-4433-a8f3-e10779fced07"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("2dcf6d43-60e4-40e3-a4c9-5863f5643cef")
                        },
                        new
                        {
                            Id = new Guid("912366b6-7717-4046-9f53-c19140acb5f1"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("f3fbf0eb-ef16-40c1-9bdc-0a7123176f08")
                        },
                        new
                        {
                            Id = new Guid("eb5f4b9b-b433-4d65-8b4a-86aa0c28f6d7"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("eb335c98-4143-4844-80fc-eb45f545b3b5")
                        },
                        new
                        {
                            Id = new Guid("5495c1a8-f357-4d78-aec1-d5a8eb70d996"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("a3a2a614-9f7e-49bd-ab04-f5a65823b5b1")
                        },
                        new
                        {
                            Id = new Guid("e092f8e9-3429-49a5-ac26-32d778aadb51"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Extra = false,
                            ToppingId = new Guid("8e0ef6b8-8979-46e8-9425-88d05b7083b3")
                        },
                        new
                        {
                            Id = new Guid("2651776b-f785-4906-a7dd-e605d219adaa"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("efd1e2df-888f-4ccb-a237-6f5ea21cefe0")
                        },
                        new
                        {
                            Id = new Guid("bcc66c80-7159-4100-bef1-ec5f3cfccfac"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("2dd66e1e-66ca-4b68-8fc7-5858e477488a")
                        },
                        new
                        {
                            Id = new Guid("6a8720a9-5821-4df1-b9a1-ded5835000ba"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("9210eeb1-8dc6-49d8-a423-132617edcd10")
                        },
                        new
                        {
                            Id = new Guid("62779b0e-56d2-4770-9e0e-9c5bdc751f1a"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("29ff0a1f-97aa-4772-8904-d49220db3694")
                        },
                        new
                        {
                            Id = new Guid("b79b09e6-ff57-4ead-824a-01f90063fc51"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("2dcf6d43-60e4-40e3-a4c9-5863f5643cef")
                        },
                        new
                        {
                            Id = new Guid("3a65ed95-69c9-421a-86b1-45bc83e8355b"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("f3fbf0eb-ef16-40c1-9bdc-0a7123176f08")
                        },
                        new
                        {
                            Id = new Guid("14cd6020-a3ff-4064-8d53-4eebcb575a8d"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("f3fbf0eb-ef16-40c1-9bdc-0a7123176f08")
                        },
                        new
                        {
                            Id = new Guid("0d73de71-a276-41c4-9601-b07d7764d34f"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("eb335c98-4143-4844-80fc-eb45f545b3b5")
                        },
                        new
                        {
                            Id = new Guid("48df298f-bf43-462f-afef-6d737ecc259d"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("a3a2a614-9f7e-49bd-ab04-f5a65823b5b1")
                        },
                        new
                        {
                            Id = new Guid("620a436b-00bf-4e85-bb1d-2e24c9bec4a4"),
                            BurgerId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            Extra = false,
                            ToppingId = new Guid("8e0ef6b8-8979-46e8-9425-88d05b7083b3")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("329e1c49-53c3-4392-a70d-ff89ef38cbc5"),
                            BurgerId = new Guid("634febcc-7523-4269-9d01-e42f101eae0a"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("787d6425-0a64-4696-9c1a-8d7b54ce8d82"),
                            BurgerId = new Guid("e44f9af6-655d-4628-8c98-875b03f5473a"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6021f50d-15a6-47ff-8eba-e51ffbb54df9"),
                            ComboId = new Guid("787d6425-0a64-4696-9c1a-8d7b54ce8d82"),
                            ItemId = new Guid("38dc94be-3dcf-4314-a4e2-323d6485e76b"),
                            OrderId = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9")
                        },
                        new
                        {
                            Id = new Guid("2b291270-64f7-43f3-a152-0ed737f79379"),
                            ComboId = new Guid("787d6425-0a64-4696-9c1a-8d7b54ce8d82"),
                            ItemId = new Guid("1ce0f36b-35f6-41b4-9bf6-ae1c826dc61b"),
                            OrderId = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9")
                        },
                        new
                        {
                            Id = new Guid("c5702e08-9d19-4189-a07d-094a2521e0fc"),
                            ComboId = new Guid("787d6425-0a64-4696-9c1a-8d7b54ce8d82"),
                            ItemId = new Guid("f2cebf79-feff-4f67-9d0f-c8c02b4ada94"),
                            OrderId = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48662a7b-15c9-4486-b59c-14a36190ef30"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("678e387a-2551-4452-a80e-1a09f7de7076"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("7b02a299-a291-4a3b-b359-2edc22899e77"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("e1782c27-1fc1-4988-8b88-94025f7dc7b2"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("f146e8cf-7198-400b-ae45-70e6287bdea6"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("d73d8ad9-9fee-4ba3-9fc2-bcbd528f9890"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9"),
                            CustomerId = new Guid("ba93f744-6a18-42ca-84dc-e48d67855cb0"),
                            EmployeeId = new Guid("a8b1424d-8270-49dd-b72c-e1896db13e75"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("4ca8a278-5910-40e7-ad31-af49f5ace38f")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2cebf79-feff-4f67-9d0f-c8c02b4ada94"),
                            DrinkId = new Guid("7b02a299-a291-4a3b-b359-2edc22899e77"),
                            OrderId = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9"),
                            Quantity = 1,
                            SizeId = new Guid("098e8c9d-87d5-42e5-bfeb-787253180835")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ce0f36b-35f6-41b4-9bf6-ae1c826dc61b"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("b8f91b50-04ff-4c47-8c64-90d4649580c9"),
                            Quantity = 1,
                            SideId = new Guid("b5cc19c4-755d-4198-8185-8d4786c49153"),
                            SizeId = new Guid("28179729-4f26-4667-8e49-0702b1789349")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ca8a278-5910-40e7-ad31-af49f5ace38f"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("fbe65cf5-676b-45dc-8772-05a15eb525ad"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("b98a6937-829e-4834-afb5-032f51d0e5cb"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5cc19c4-755d-4198-8185-8d4786c49153"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("6fc52287-6d31-43bd-b092-40e72be42b09"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("80b5f45e-22b1-42b8-8dd4-53f3625cf53a"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("bd799ba8-475b-47a4-9e88-f64af8be5843"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("8b596700-cef7-40c7-90fe-6a0fad4fb0dd"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("151c5f80-eaea-4233-a7fa-d951fdb3381f"),
                            Name = "small",
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("098e8c9d-87d5-42e5-bfeb-787253180835"),
                            Name = "medium",
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("28179729-4f26-4667-8e49-0702b1789349"),
                            Name = "large",
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dd66e1e-66ca-4b68-8fc7-5858e477488a"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("9210eeb1-8dc6-49d8-a423-132617edcd10"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("29ff0a1f-97aa-4772-8904-d49220db3694"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("2dcf6d43-60e4-40e3-a4c9-5863f5643cef"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("a3a2a614-9f7e-49bd-ab04-f5a65823b5b1"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("eb335c98-4143-4844-80fc-eb45f545b3b5"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("efd1e2df-888f-4ccb-a237-6f5ea21cefe0"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("f3fbf0eb-ef16-40c1-9bdc-0a7123176f08"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("8e0ef6b8-8979-46e8-9425-88d05b7083b3"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("be5324a9-2702-4016-bc9e-3f2727ae981e"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("792b2b03-311c-422f-b2ff-39bb405a5697"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("a6d64d08-518d-47fa-b883-9033940a4695"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "fcc4b018-9081-43a7-91e6-e82ff8a61fd7",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("a8b1424d-8270-49dd-b72c-e1896db13e75"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "53e45d77-e821-4533-8290-440c385cc6d5",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("6142a667-7f16-410a-b87c-a2d2aa5804ca"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "3e17f931-a840-4cd8-b088-591069bcdc04",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("ba93f744-6a18-42ca-84dc-e48d67855cb0"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "2f44720f-855c-4319-8ef7-d871b99aed3e",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "9a9683d9-e090-416a-b6ed-62221c71214f",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b4aa31f-45d1-46f1-ae71-9269d33339ba",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGsohjXwAKTheqfLxjWBmBeg0KAl9XRIiocvuchYcHT+DW7yVK7wufUP1rSz23cOdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11d7b080-b408-4dae-b452-26ad632fb07f",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "fcc4b018-9081-43a7-91e6-e82ff8a61fd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9fbbd00-9e9b-4af5-b483-039cbb3c75c7",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEpuGiuGuGNAmb+rxdwpePGnR8HYojTWuZdvKGQTmjtVSLWOjQy/fEcXgP9qaEXOBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fface5d8-69d7-4999-84ff-8ea93e2d609a",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "3e17f931-a840-4cd8-b088-591069bcdc04",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "433ce99a-5357-4d06-8a16-9e9d02dd535d",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDdBPZkpu+q9poXuyuJH5nn4/5w+uWLCSZ4fSo26UEgMlo9QfJicWyHKO5xJKqhNSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5ed5d9c-8e46-4d55-9272-6c75bcc4b608",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "53e45d77-e821-4533-8290-440c385cc6d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e167c72d-e086-4a64-bb23-b8fa272234c2",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIw9Bfw2ixwAFLcUyDdrhQUorcoCUPdNayt1+JJiQBezc81e2MfbRq4Br2VkM/0NSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44fd06fe-2e82-4140-9e03-23b1033c6706",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "2f44720f-855c-4319-8ef7-d871b99aed3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2e1db49-5c68-4c3f-9e3c-db5620ac0d79",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIHY6Sp0WvFdw4FLkc2rSybgFagcSORszj/+Ycnm6cA46rPjKpIuNnypRopEiGgwIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4849d49e-0ece-4a7e-9d02-edc0a266e8ac",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "3e17f931-a840-4cd8-b088-591069bcdc04",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "fcc4b018-9081-43a7-91e6-e82ff8a61fd7",
                            RoleId = "9a9683d9-e090-416a-b6ed-62221c71214f"
                        },
                        new
                        {
                            UserId = "53e45d77-e821-4533-8290-440c385cc6d5",
                            RoleId = "9a9683d9-e090-416a-b6ed-62221c71214f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
