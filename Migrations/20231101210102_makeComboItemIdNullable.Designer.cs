// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231101210102_makeComboItemIdNullable")]
    partial class makeComboItemIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            IsDeleted = false,
                            OrderId = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            IsDeleted = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            IsDeleted = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b59d2e83-a7e8-4264-bd0e-581ea16764b3"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("e85f7aec-6215-44d1-9546-8f624df7270a")
                        },
                        new
                        {
                            Id = new Guid("67d61c0b-297a-481d-909d-56e6a6ab9f03"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("696482ed-5cde-48c7-b432-8adb4fc2cd90")
                        },
                        new
                        {
                            Id = new Guid("05fc8b17-1400-4bd7-ac34-297f023bbc74"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("4037f0c5-78c8-4e3f-81c2-31fdc546f002")
                        },
                        new
                        {
                            Id = new Guid("cedc8f4a-b280-4fae-ab2d-4288c266d72c"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("0b0d5372-d624-4759-b5e6-10f411a55c0f")
                        },
                        new
                        {
                            Id = new Guid("39f2fe10-e4a1-4bfd-b000-f41a9b8c172b"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("3f7bdacb-7570-4be7-a410-418ead2d3d57")
                        },
                        new
                        {
                            Id = new Guid("8afe7108-7abb-4b67-90fb-9e21859402cf"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("3e4d6ab3-7beb-4aec-bd8b-1a1876a8030c")
                        },
                        new
                        {
                            Id = new Guid("c1ba07d1-5fa5-4afd-a0cc-5db746286586"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("3e4d6ab3-7beb-4aec-bd8b-1a1876a8030c")
                        },
                        new
                        {
                            Id = new Guid("0fdcddf3-63d6-4521-9c4e-44e0a3307395"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("d15255a6-ab32-4c0b-a20e-0794ba82566f")
                        },
                        new
                        {
                            Id = new Guid("b7177dd4-4c0a-4173-97a9-e0ed243969f2"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("7644184a-83e7-4178-8016-5eeb4d94546d")
                        },
                        new
                        {
                            Id = new Guid("3ab1b063-9cbc-47ec-babc-83a1bf9a9cac"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Extra = false,
                            ToppingId = new Guid("bce53e03-17db-4f8f-a6e9-d1f95dc142cf")
                        },
                        new
                        {
                            Id = new Guid("b11085b8-0702-4a0c-ad61-60d03daca937"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("e85f7aec-6215-44d1-9546-8f624df7270a")
                        },
                        new
                        {
                            Id = new Guid("ce746e63-4832-476b-a00c-4a118df261d8"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("696482ed-5cde-48c7-b432-8adb4fc2cd90")
                        },
                        new
                        {
                            Id = new Guid("42b6fd44-8d5c-4eb1-94eb-ca7fc8348afe"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("4037f0c5-78c8-4e3f-81c2-31fdc546f002")
                        },
                        new
                        {
                            Id = new Guid("5246a7d3-3805-4dc0-a7f6-fe70b5c3d823"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("0b0d5372-d624-4759-b5e6-10f411a55c0f")
                        },
                        new
                        {
                            Id = new Guid("910be51a-d7fa-4933-904f-720e1c061048"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("3f7bdacb-7570-4be7-a410-418ead2d3d57")
                        },
                        new
                        {
                            Id = new Guid("f686f905-aed9-4e18-860c-a471d1b32b8a"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("3e4d6ab3-7beb-4aec-bd8b-1a1876a8030c")
                        },
                        new
                        {
                            Id = new Guid("d051e0b5-a0fa-4dcf-93f4-4c2d0483f0ab"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("d15255a6-ab32-4c0b-a20e-0794ba82566f")
                        },
                        new
                        {
                            Id = new Guid("4aef18c5-3fe7-4b14-a0dd-89dc903963c7"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("7644184a-83e7-4178-8016-5eeb4d94546d")
                        },
                        new
                        {
                            Id = new Guid("a3dc5217-1bbd-43cc-9e9b-72201c9f1bfa"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Extra = false,
                            ToppingId = new Guid("bce53e03-17db-4f8f-a6e9-d1f95dc142cf")
                        },
                        new
                        {
                            Id = new Guid("001b0143-663b-4081-b157-fd0b67e5019d"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("e85f7aec-6215-44d1-9546-8f624df7270a")
                        },
                        new
                        {
                            Id = new Guid("ed9b726b-f423-4a28-9d9a-f75ebf9a5554"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("696482ed-5cde-48c7-b432-8adb4fc2cd90")
                        },
                        new
                        {
                            Id = new Guid("136fe276-f7f5-4db1-81b5-f3be24882536"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("4037f0c5-78c8-4e3f-81c2-31fdc546f002")
                        },
                        new
                        {
                            Id = new Guid("6ee46010-b0a6-4fd7-9708-eb1b08dafaf0"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("0b0d5372-d624-4759-b5e6-10f411a55c0f")
                        },
                        new
                        {
                            Id = new Guid("4c21413d-50df-4260-a50b-b90db7ee864c"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("3f7bdacb-7570-4be7-a410-418ead2d3d57")
                        },
                        new
                        {
                            Id = new Guid("8ac76d24-88b7-40d4-a519-338bd5b106bf"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("3e4d6ab3-7beb-4aec-bd8b-1a1876a8030c")
                        },
                        new
                        {
                            Id = new Guid("d1973675-0b01-4620-a07b-e6564b00ad80"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("3e4d6ab3-7beb-4aec-bd8b-1a1876a8030c")
                        },
                        new
                        {
                            Id = new Guid("cb2efe73-cef4-44f1-b8e2-6a9dd02ada2c"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("d15255a6-ab32-4c0b-a20e-0794ba82566f")
                        },
                        new
                        {
                            Id = new Guid("69f95c8e-afed-462b-aa04-bdb5aba32a04"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("7644184a-83e7-4178-8016-5eeb4d94546d")
                        },
                        new
                        {
                            Id = new Guid("9a2e0b62-5742-4b6b-842a-61bda6c2411a"),
                            BurgerId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            Extra = false,
                            ToppingId = new Guid("bce53e03-17db-4f8f-a6e9-d1f95dc142cf")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4b488ec-422e-4430-a688-79f65bfc72a3"),
                            BurgerId = new Guid("bef39fd0-e03e-44a1-b436-a111aa1a64f6"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("591d2a60-1e1f-4e45-8d8e-60d967bb0baa"),
                            BurgerId = new Guid("13459a5d-e20f-4a27-984c-f29de7c88231"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e8f95ea-b484-4d03-8e81-b797178c2433"),
                            ComboId = new Guid("591d2a60-1e1f-4e45-8d8e-60d967bb0baa"),
                            ItemId = new Guid("803fd7d6-20bc-4ef8-a3e5-c0bb6eab0c5b"),
                            OrderId = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77")
                        },
                        new
                        {
                            Id = new Guid("ec801b14-31e4-4d5c-a7b0-a90258e1ccf9"),
                            ComboId = new Guid("591d2a60-1e1f-4e45-8d8e-60d967bb0baa"),
                            ItemId = new Guid("fec16524-94e2-40ab-ae74-b1934929a94a"),
                            OrderId = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77")
                        },
                        new
                        {
                            Id = new Guid("33da7646-ddca-410f-b6b7-949c7c51afd9"),
                            ComboId = new Guid("591d2a60-1e1f-4e45-8d8e-60d967bb0baa"),
                            ItemId = new Guid("8010148d-fb39-4e40-9e77-2a16d915a63a"),
                            OrderId = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf165a7c-d75b-4e87-999d-0166db365738"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("13da9af7-199c-4f71-bafd-443698195434"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("94b7bace-7b17-4cf2-897b-405e77219f9f"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("be8135ef-d965-4195-a6de-96e70a4c275a"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("6f6b8768-2a83-4b1d-9d4b-a064a9b4d6db"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("72e7e72e-e7ab-46af-b32f-4346fe2794c6"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77"),
                            CustomerId = new Guid("1c72002e-1442-4b19-a3c1-ab63e84c658a"),
                            EmployeeId = new Guid("d550e971-01c2-426b-aa99-b8a96c224bc1"),
                            OrderTime = new DateTime(2023, 11, 1, 16, 1, 2, 469, DateTimeKind.Local).AddTicks(9966),
                            OrderTypeId = new Guid("3459abf7-be25-4859-a51f-e5bd02184923")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8010148d-fb39-4e40-9e77-2a16d915a63a"),
                            DrinkId = new Guid("94b7bace-7b17-4cf2-897b-405e77219f9f"),
                            OrderId = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77"),
                            Quantity = 1,
                            SizeId = new Guid("d0e84746-6b63-4141-927b-0dd98fc4f663")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fec16524-94e2-40ab-ae74-b1934929a94a"),
                            OrderId = new Guid("f58affd2-79dc-42a2-ae88-1220a97a4f77"),
                            Quantity = 1,
                            SideId = new Guid("3a055cc0-b10e-42e5-93d8-3c418ea9916d"),
                            SizeId = new Guid("876cdea2-fd13-41db-9acf-17bd1db1d3b0")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3459abf7-be25-4859-a51f-e5bd02184923"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("d8efa777-c551-4819-9245-1cc29acb1e4d"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("869e3450-09f6-4193-bee8-0be90a395084"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a055cc0-b10e-42e5-93d8-3c418ea9916d"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("f645a7df-01e7-4af9-9107-d7ffe33d213b"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("6d3b3710-be54-4f4e-884f-b5527d57d59a"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("9e6b8113-b679-4daf-9194-58ccc3b82cb7"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("0ae9f5c6-e355-4df0-8b68-eb2fb0b450f0"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98fabc59-1598-4a62-85c2-2307114d7db0"),
                            IsDeleted = false,
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("d0e84746-6b63-4141-927b-0dd98fc4f663"),
                            IsDeleted = false,
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("876cdea2-fd13-41db-9acf-17bd1db1d3b0"),
                            IsDeleted = false,
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("696482ed-5cde-48c7-b432-8adb4fc2cd90"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("4037f0c5-78c8-4e3f-81c2-31fdc546f002"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("0b0d5372-d624-4759-b5e6-10f411a55c0f"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("3f7bdacb-7570-4be7-a410-418ead2d3d57"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("7644184a-83e7-4178-8016-5eeb4d94546d"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("d15255a6-ab32-4c0b-a20e-0794ba82566f"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("e85f7aec-6215-44d1-9546-8f624df7270a"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("3e4d6ab3-7beb-4aec-bd8b-1a1876a8030c"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("bce53e03-17db-4f8f-a6e9-d1f95dc142cf"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("ff6b04ce-7fd9-455b-9ae9-6790af08eb67"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17b74955-70d1-4f13-8705-879f18b7808a"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("0291710e-42ee-4980-b4fd-4425764cf7f2"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "3bd3e038-0ad6-49fb-9006-e2b1e6d39502",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("d550e971-01c2-426b-aa99-b8a96c224bc1"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "d66951c7-644c-47cc-b630-bfdba94d2347",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("e5cd5c90-1239-4360-8c62-eed8b66ae066"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "180b6cd0-67cf-41e3-a455-05242aca0388",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("1c72002e-1442-4b19-a3c1-ab63e84c658a"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "d126a2fa-7fa7-4c5a-9614-6ee754a6eff2",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "d5279e80-452e-4245-a0e1-86f14dcf874c",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "738221cc-a232-4149-a219-14b40b4d5da1",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN3jAdSXKO9WPI1J2hDWq3W7m3OiryOOc6iRdHQjzoDwGBEOc5ElbW4Vksu+ZrOH7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6e16963-6019-4161-a2c9-ce0a486a060d",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "3bd3e038-0ad6-49fb-9006-e2b1e6d39502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19bc61e7-724d-4681-9229-e72e3776a815",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMzaGDyhcGzDY87/nhKXLwEZ4jO1z0Rwa6XNZOlwIsbC2IwSWODCCKSy95ZcDLOtGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d456b79-fd4d-4850-998a-5b1d36050075",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "180b6cd0-67cf-41e3-a455-05242aca0388",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd43873a-74cc-4735-9aeb-66ab9c190ef1",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHZN89nzVHNviOGepB2cn5eWKGjzVVX+yK/UCYhgvLIZ50b/28YnVNjVOq2vgGEKgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d130467b-c46b-4c76-9437-edce44b5fe6c",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "d66951c7-644c-47cc-b630-bfdba94d2347",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c9cd966-7684-4998-a5de-3350f891d731",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKJBN9xBMOSKFYzKJsRX3X1wApT8oJIdtZuIb1w+1Tn9XdUMPEzaJnt463s4ukuvog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb701c42-209e-4d4f-83b4-6b7f77c8ebb5",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "d126a2fa-7fa7-4c5a-9614-6ee754a6eff2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6626f91-0cf7-4458-a3b0-22b376bf7eab",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEB9zhSsmGF+D3Dc5FUJRNy78MBUiJx6Ub2klY3FHB+MBawVk/aOmwGCLK2JUTWv1oA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fd908f9-15f7-447f-b0d5-652ff41851c1",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "180b6cd0-67cf-41e3-a455-05242aca0388",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "3bd3e038-0ad6-49fb-9006-e2b1e6d39502",
                            RoleId = "d5279e80-452e-4245-a0e1-86f14dcf874c"
                        },
                        new
                        {
                            UserId = "d66951c7-644c-47cc-b630-bfdba94d2347",
                            RoleId = "d5279e80-452e-4245-a0e1-86f14dcf874c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("ComboItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("ComboItems");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
