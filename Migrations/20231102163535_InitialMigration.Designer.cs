// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231102163535_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            IsDeleted = false,
                            IsInCombo = false,
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("331c99d1-dfbf-4de0-b618-0f901732d45c"),
                            IsDeleted = false,
                            IsInCombo = true,
                            OrderComboId = new Guid("fc814dcb-f8e5-459f-95af-62d692332d66"),
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10bc56fb-4652-43d3-abb4-31899f02fe8c"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("a5c0285a-1388-4efa-92d7-e8823d0b808b")
                        },
                        new
                        {
                            Id = new Guid("a99efd8b-67c7-4944-81ef-e9ba2aa57823"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("c336aa06-d49f-4339-9acb-c12640faccb4")
                        },
                        new
                        {
                            Id = new Guid("91798c7e-a26d-424a-97cd-a306df7de696"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("e78b8b4e-6f8e-4a00-a603-856c8b95c841")
                        },
                        new
                        {
                            Id = new Guid("97543aa1-9750-418d-873a-2af70820ff36"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("01c5611c-9213-409f-b603-9f93141cdd5d")
                        },
                        new
                        {
                            Id = new Guid("b4926c52-3b3b-4b05-a27d-252cbe50e531"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("99000478-9859-4e05-b020-ca4ea2995f13")
                        },
                        new
                        {
                            Id = new Guid("fb3b0fba-af13-46dc-868e-6fa42d98dc58"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6")
                        },
                        new
                        {
                            Id = new Guid("20e04dc8-ce1e-4cce-a21c-e0bd9b9a9421"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6")
                        },
                        new
                        {
                            Id = new Guid("269da126-a142-4363-a10a-33ba0d08d409"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("68595a1d-f146-4821-b0d2-13936391efcb")
                        },
                        new
                        {
                            Id = new Guid("e2714079-9fb5-4a59-8c64-7359a9df377c"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("98640696-a097-47f5-9ab7-741ea4c74279")
                        },
                        new
                        {
                            Id = new Guid("918739b8-5073-4001-92a2-1b6dfdf0c209"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("10138175-4d25-4900-a9fe-d2df2a24b1f3")
                        },
                        new
                        {
                            Id = new Guid("367259e8-7f00-413a-8bf7-6bfd3cf26699"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Extra = false,
                            ToppingId = new Guid("6d145a73-b647-4b51-a201-59cc1bc963e8")
                        },
                        new
                        {
                            Id = new Guid("858fed4d-a830-4475-a1f4-c9c5fc012774"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("a5c0285a-1388-4efa-92d7-e8823d0b808b")
                        },
                        new
                        {
                            Id = new Guid("577ce281-626c-4b4c-aa6c-52510cf91fe9"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("c336aa06-d49f-4339-9acb-c12640faccb4")
                        },
                        new
                        {
                            Id = new Guid("6020b133-adbd-42fe-9c75-710bc14a7fb7"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("e78b8b4e-6f8e-4a00-a603-856c8b95c841")
                        },
                        new
                        {
                            Id = new Guid("6ad3d12d-f7f2-4cae-aea4-767581f8435e"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("01c5611c-9213-409f-b603-9f93141cdd5d")
                        },
                        new
                        {
                            Id = new Guid("7e32357d-3ac8-48ec-8ee4-46846cf24778"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("99000478-9859-4e05-b020-ca4ea2995f13")
                        },
                        new
                        {
                            Id = new Guid("6f3fb36e-dfe7-4bf0-8641-807d48a2e801"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6")
                        },
                        new
                        {
                            Id = new Guid("21ce24cd-893d-4222-9f86-1dce67934c5a"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("68595a1d-f146-4821-b0d2-13936391efcb")
                        },
                        new
                        {
                            Id = new Guid("1a8d25d7-a719-40ec-8415-637436197369"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("98640696-a097-47f5-9ab7-741ea4c74279")
                        },
                        new
                        {
                            Id = new Guid("7e23918e-abc0-4904-bf70-aefe689e7b5b"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("10138175-4d25-4900-a9fe-d2df2a24b1f3")
                        },
                        new
                        {
                            Id = new Guid("167c18c4-2ea6-4c69-a746-cab48bf025bb"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Extra = false,
                            ToppingId = new Guid("6d145a73-b647-4b51-a201-59cc1bc963e8")
                        },
                        new
                        {
                            Id = new Guid("9390223a-98f3-454d-b8b5-ed59d45045a8"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("a5c0285a-1388-4efa-92d7-e8823d0b808b")
                        },
                        new
                        {
                            Id = new Guid("2657a653-c22a-42a9-8e1e-e8b14218e259"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("c336aa06-d49f-4339-9acb-c12640faccb4")
                        },
                        new
                        {
                            Id = new Guid("a223e6c4-7c74-4658-b250-d785ca9357cc"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("e78b8b4e-6f8e-4a00-a603-856c8b95c841")
                        },
                        new
                        {
                            Id = new Guid("1f5d7497-3943-461a-9c87-f7bdc575129a"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("01c5611c-9213-409f-b603-9f93141cdd5d")
                        },
                        new
                        {
                            Id = new Guid("4d195075-a252-4a3e-9ecb-18f2d1352372"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("99000478-9859-4e05-b020-ca4ea2995f13")
                        },
                        new
                        {
                            Id = new Guid("91b36c36-11fb-446e-ad5b-509515ab17d2"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6")
                        },
                        new
                        {
                            Id = new Guid("69f8c4f4-8f8e-48ed-8adf-ff1c279ed03e"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6")
                        },
                        new
                        {
                            Id = new Guid("426ae32d-e25a-4ab9-a39e-3000b0596313"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("68595a1d-f146-4821-b0d2-13936391efcb")
                        },
                        new
                        {
                            Id = new Guid("2983e0f5-dc02-47d3-877b-927890f186c7"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("98640696-a097-47f5-9ab7-741ea4c74279")
                        },
                        new
                        {
                            Id = new Guid("59376eb6-9834-4c8a-b116-8e1f4d0d2c89"),
                            BurgerId = new Guid("db37221a-a447-49f9-b71b-1e43bcada3ce"),
                            Extra = false,
                            ToppingId = new Guid("10138175-4d25-4900-a9fe-d2df2a24b1f3")
                        },
                        new
                        {
                            Id = new Guid("e4f8c85d-cca4-4793-9f71-8f680a9866fa"),
                            BurgerId = new Guid("331c99d1-dfbf-4de0-b618-0f901732d45c"),
                            Extra = false,
                            ToppingId = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6")
                        },
                        new
                        {
                            Id = new Guid("ac9a5923-2e03-4518-b444-ff21f39827f1"),
                            BurgerId = new Guid("331c99d1-dfbf-4de0-b618-0f901732d45c"),
                            Extra = false,
                            ToppingId = new Guid("68595a1d-f146-4821-b0d2-13936391efcb")
                        },
                        new
                        {
                            Id = new Guid("7cea09d6-7121-4a96-ae9e-464038255372"),
                            BurgerId = new Guid("331c99d1-dfbf-4de0-b618-0f901732d45c"),
                            Extra = false,
                            ToppingId = new Guid("98640696-a097-47f5-9ab7-741ea4c74279")
                        },
                        new
                        {
                            Id = new Guid("fef70a7d-7562-474c-b3cc-40de74007127"),
                            BurgerId = new Guid("331c99d1-dfbf-4de0-b618-0f901732d45c"),
                            Extra = false,
                            ToppingId = new Guid("10138175-4d25-4900-a9fe-d2df2a24b1f3")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79234bc9-1c61-48d7-9f71-fd39b709f861"),
                            BurgerId = new Guid("384e5161-01dc-442d-8c18-126437a6eab9"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("e1b6f175-66b2-4a94-bbcf-8b84a699f34e"),
                            BurgerId = new Guid("a58ddd25-9d3c-4680-9987-2f40b8a8eb07"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d8fa0aa-5934-4826-91c8-99ffde6807fd"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("87304387-1d79-45d3-9842-187b4a13007c"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("070bda98-ee93-4a01-953b-8c918bfa3fdf"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("b75132fa-4968-4034-8b6b-e3b0db5bca26"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("f0414b6e-bac0-46f5-8951-e30b1ff63175"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("83e1c7b4-eeb6-44cd-b844-a907cf594c4c"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            CustomerId = new Guid("5d30765e-3935-426b-8e36-54b89c4c837b"),
                            EmployeeId = new Guid("874c4147-2c7e-4214-8e63-855d3dc01d42"),
                            OrderTime = new DateTime(2023, 11, 2, 11, 35, 35, 231, DateTimeKind.Local).AddTicks(7561),
                            OrderTypeId = new Guid("5cc9124e-1446-4c42-a028-8e9c183e468e")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCombos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc814dcb-f8e5-459f-95af-62d692332d66"),
                            ComboId = new Guid("79234bc9-1c61-48d7-9f71-fd39b709f861"),
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("171c92c6-653a-4e26-89d0-e84b2fb3d15f"),
                            DrinkId = new Guid("070bda98-ee93-4a01-953b-8c918bfa3fdf"),
                            IsInCombo = false,
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 1,
                            SizeId = new Guid("a0893089-a608-4d1e-b807-b3980ab4f049")
                        },
                        new
                        {
                            Id = new Guid("e33b38bb-da1c-4a67-9750-213fddddc306"),
                            DrinkId = new Guid("4d8fa0aa-5934-4826-91c8-99ffde6807fd"),
                            IsInCombo = true,
                            OrderComboId = new Guid("fc814dcb-f8e5-459f-95af-62d692332d66"),
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 1,
                            SizeId = new Guid("a0893089-a608-4d1e-b807-b3980ab4f049")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37478a8d-ef7a-485a-8973-cad7a767aa9a"),
                            IsInCombo = false,
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 1,
                            SideId = new Guid("f1f98c88-4260-45e9-b758-7feb306bc849"),
                            SizeId = new Guid("690499d6-ffcc-4f92-9c9e-2c78425fc535")
                        },
                        new
                        {
                            Id = new Guid("a6e1e377-739d-4ff5-85c2-ddb559d19f29"),
                            IsInCombo = true,
                            OrderComboId = new Guid("fc814dcb-f8e5-459f-95af-62d692332d66"),
                            OrderId = new Guid("eb027aa2-b77e-420b-8dae-0465f1928239"),
                            Quantity = 1,
                            SideId = new Guid("09ac8bb8-ff67-441c-814e-6a0730e19229"),
                            SizeId = new Guid("690499d6-ffcc-4f92-9c9e-2c78425fc535")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cc9124e-1446-4c42-a028-8e9c183e468e"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("a946ff06-e506-48d9-b0d3-381fd4d2f7b5"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("ee405ec9-bb64-4278-aafa-f410480710de"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f98c88-4260-45e9-b758-7feb306bc849"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("a5bf2622-0af5-46e5-a0e5-c3a6f3ea9975"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("09ac8bb8-ff67-441c-814e-6a0730e19229"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("89a2fdab-c960-4999-bb13-3667b88964cb"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("a1e7c160-7276-497f-9835-59b7e692c3f6"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e0c2ff4-d10a-4070-80d6-510a201f48e2"),
                            IsDeleted = false,
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("a0893089-a608-4d1e-b807-b3980ab4f049"),
                            IsDeleted = false,
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("690499d6-ffcc-4f92-9c9e-2c78425fc535"),
                            IsDeleted = false,
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c336aa06-d49f-4339-9acb-c12640faccb4"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("e78b8b4e-6f8e-4a00-a603-856c8b95c841"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("01c5611c-9213-409f-b603-9f93141cdd5d"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("99000478-9859-4e05-b020-ca4ea2995f13"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("98640696-a097-47f5-9ab7-741ea4c74279"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("68595a1d-f146-4821-b0d2-13936391efcb"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("a5c0285a-1388-4efa-92d7-e8823d0b808b"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("4a99cea4-95bb-49b1-83ac-a909b3334fb6"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("10138175-4d25-4900-a9fe-d2df2a24b1f3"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("6d145a73-b647-4b51-a201-59cc1bc963e8"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("426541e2-b346-47e4-8134-43f3f9f497b7"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("bc930ebd-6b58-48c3-bfa2-5bc53bbf7599"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "715a99dc-b008-49a3-9ae7-69771bf81903",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("874c4147-2c7e-4214-8e63-855d3dc01d42"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "154aa6e9-974c-48f1-84b5-e97f551b0c49",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("0819b90b-97b5-4b52-b901-ac02d54e0938"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "81c6506d-3660-48e7-acf5-b8b1139b85d8",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("5d30765e-3935-426b-8e36-54b89c4c837b"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "bb5c3e28-80e3-4a16-bc62-688478488333",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "305c1645-d050-45b9-b350-53f8d9eac0ff",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83dfdc4c-824d-412d-956f-1ab13683c5c0",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJZBrcs8Mg5S5CCsxviReId5M1f4w3TWZd9wrzHNzfyVaSFljRq9lL37mbBYPwtfkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8952682b-db60-4bb9-9ff9-df683e6d0a3d",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "715a99dc-b008-49a3-9ae7-69771bf81903",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bf7af08-cdc1-4245-91a6-cdaa3eeed7f8",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBisv6aFx7AmnIzPXZE5hd7cIM5dRLg/y4fP/L7t1fd+o1CceeL8PAtvv0LGvApoAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12e29fdf-d9a8-4733-9469-3e562a65bc58",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "81c6506d-3660-48e7-acf5-b8b1139b85d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fd84a0a-b542-4cab-8b29-7325fb9179e0",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAXbWnq1P4XxPxPb0mbU3tzZEuz79fIyoX9Z/GfW9yZ3P4sG+JDz2QEC6G6MON5HNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fba595b-1ba3-4768-a65b-0494b92b7684",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "154aa6e9-974c-48f1-84b5-e97f551b0c49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b282e4c1-65de-4907-9dff-1ad32c69c559",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAJ9UgjU/dIKIzhgN/4L0X2OrsFfbmVzORE4SO/s/HgivSrX6uz51Hp7tMNPTSoU1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b0189ac-5c82-4505-ac19-17612ef03ac2",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "bb5c3e28-80e3-4a16-bc62-688478488333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd7273a7-c7a9-49ab-9252-55780e339abc",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBtJo1S26L21m9nwelB/J8CendhJrptGwj9KvqmQL/NrBkt26V3cSO+32zTMGTXCaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dac99c3c-03a7-4607-9ec2-d2a37e49b046",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "81c6506d-3660-48e7-acf5-b8b1139b85d8",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "715a99dc-b008-49a3-9ae7-69771bf81903",
                            RoleId = "305c1645-d050-45b9-b350-53f8d9eac0ff"
                        },
                        new
                        {
                            UserId = "154aa6e9-974c-48f1-84b5-e97f551b0c49",
                            RoleId = "305c1645-d050-45b9-b350-53f8d9eac0ff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("Burger")
                        .HasForeignKey("KrustyKrab.Models.Burger", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("OrderCombos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderDrink")
                        .HasForeignKey("KrustyKrab.Models.OrderDrink", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderSide")
                        .HasForeignKey("KrustyKrab.Models.OrderSide", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("OrderSides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("OrderCombos");

                    b.Navigation("OrderDrinks");

                    b.Navigation("OrderSides");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Navigation("Burger");

                    b.Navigation("OrderDrink");

                    b.Navigation("OrderSide");
                });
#pragma warning restore 612, 618
        }
    }
}
