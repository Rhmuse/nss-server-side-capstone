// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231023155942_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            OrderId = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("deb3b86c-7ceb-43a9-b3f8-242765ae0cd1"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("560a328b-a9e0-47d9-aa36-6e497dc9ea9f")
                        },
                        new
                        {
                            Id = new Guid("b91a8cae-e72a-4cb6-a0c8-9442df63ae18"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("bf948597-f998-436b-bacd-ac718365d263")
                        },
                        new
                        {
                            Id = new Guid("cf0fe751-4e38-4e8e-b6e4-73c8ad8970d2"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("80798c5b-c0f9-478a-9638-468744a34b1d")
                        },
                        new
                        {
                            Id = new Guid("ca088b58-3b33-4c7f-9587-80536ffd193d"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("1b917219-c9ad-4698-819f-f530bfd3cfd7")
                        },
                        new
                        {
                            Id = new Guid("3a5cf372-8a22-4762-91b0-771d1875550e"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("8e109b34-2711-4fa3-a3ce-cd55f62e2db6")
                        },
                        new
                        {
                            Id = new Guid("63e26862-9a74-4b1c-813e-1bab640eef2c"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("e0c661cf-f3b4-4046-bdc8-98dd94941755")
                        },
                        new
                        {
                            Id = new Guid("d00984fa-196e-4e18-ada6-8c09b5d309e3"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("e0c661cf-f3b4-4046-bdc8-98dd94941755")
                        },
                        new
                        {
                            Id = new Guid("c8156e00-916a-485a-aff7-5195657f17c0"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("4138fbb6-eabe-4e97-8fb5-a592d108d939")
                        },
                        new
                        {
                            Id = new Guid("fecde59e-71ad-4319-88bb-5b3d52cba5d5"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("f03ad51b-51ed-4429-8ff5-96d21d22206e")
                        },
                        new
                        {
                            Id = new Guid("8bba1336-86d3-4ea3-a285-b11c2dfd9cf5"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            ToppingId = new Guid("988d8678-2a45-4322-b758-da6aa02013d5")
                        },
                        new
                        {
                            Id = new Guid("e6ef39b2-ff3b-403a-a626-dd6ce2748ce7"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("560a328b-a9e0-47d9-aa36-6e497dc9ea9f")
                        },
                        new
                        {
                            Id = new Guid("0e90bf65-e600-4115-a7c7-0d2602b0b791"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("bf948597-f998-436b-bacd-ac718365d263")
                        },
                        new
                        {
                            Id = new Guid("d1288a7f-4f20-40db-97bd-784e1c9703d5"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("80798c5b-c0f9-478a-9638-468744a34b1d")
                        },
                        new
                        {
                            Id = new Guid("393d18cc-6273-4686-a6ae-84cc52c3a55f"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("1b917219-c9ad-4698-819f-f530bfd3cfd7")
                        },
                        new
                        {
                            Id = new Guid("1961854e-f31a-4802-9f25-256d617c8cdf"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("8e109b34-2711-4fa3-a3ce-cd55f62e2db6")
                        },
                        new
                        {
                            Id = new Guid("bb21a63f-97c6-48b3-b810-c4b539a9f85c"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("e0c661cf-f3b4-4046-bdc8-98dd94941755")
                        },
                        new
                        {
                            Id = new Guid("f91c22e8-8ae9-4246-ae82-920e6764a409"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("4138fbb6-eabe-4e97-8fb5-a592d108d939")
                        },
                        new
                        {
                            Id = new Guid("184c3ef1-4462-4b88-8ca9-de73cc031d8f"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("f03ad51b-51ed-4429-8ff5-96d21d22206e")
                        },
                        new
                        {
                            Id = new Guid("eb0ad7ba-79ec-484c-af31-ed55845e3648"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            ToppingId = new Guid("988d8678-2a45-4322-b758-da6aa02013d5")
                        },
                        new
                        {
                            Id = new Guid("b6abe447-eb4f-4402-8c70-87e22a26bf9f"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("560a328b-a9e0-47d9-aa36-6e497dc9ea9f")
                        },
                        new
                        {
                            Id = new Guid("bfec3e88-3266-4f2b-8300-c9fd4042a544"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("bf948597-f998-436b-bacd-ac718365d263")
                        },
                        new
                        {
                            Id = new Guid("41a55886-9495-4bde-bfb4-9bbea84a5252"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("80798c5b-c0f9-478a-9638-468744a34b1d")
                        },
                        new
                        {
                            Id = new Guid("96328079-d968-4459-8aae-7ed7cc8a5f48"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("1b917219-c9ad-4698-819f-f530bfd3cfd7")
                        },
                        new
                        {
                            Id = new Guid("5a59164d-488a-4752-a6ac-8b55c7cef494"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("8e109b34-2711-4fa3-a3ce-cd55f62e2db6")
                        },
                        new
                        {
                            Id = new Guid("18ec4b01-0f82-478d-8271-17a191da2de6"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("e0c661cf-f3b4-4046-bdc8-98dd94941755")
                        },
                        new
                        {
                            Id = new Guid("aa4dea0e-bcd5-4c43-8274-a6c407eda2ef"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("e0c661cf-f3b4-4046-bdc8-98dd94941755")
                        },
                        new
                        {
                            Id = new Guid("8abb91b0-58c8-4b9c-ba8d-fad63266d3c8"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("4138fbb6-eabe-4e97-8fb5-a592d108d939")
                        },
                        new
                        {
                            Id = new Guid("ff055365-b367-4f57-867d-28bea648549c"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("f03ad51b-51ed-4429-8ff5-96d21d22206e")
                        },
                        new
                        {
                            Id = new Guid("fe4fbfda-28e1-4a4a-9bc1-5d199921c944"),
                            BurgerId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            ToppingId = new Guid("988d8678-2a45-4322-b758-da6aa02013d5")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d3d7218-65b1-4932-a6e7-7f5e8875f1f1"),
                            BurgerId = new Guid("080e587a-9cb4-4d1c-9d5a-b0035f317ac9"),
                            Discount = -1f,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("933b55b5-0717-46b4-b490-cee5bb35ad6c"),
                            BurgerId = new Guid("0ba6206a-8e20-41a0-a0bb-51fac3914a4a"),
                            Discount = -1.25f,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77c4d776-5aa2-4d94-93b7-58493173ac8f"),
                            ComboId = new Guid("933b55b5-0717-46b4-b490-cee5bb35ad6c"),
                            ItemId = new Guid("7c3e7931-a0a1-41e1-8376-98043e7f08ac"),
                            OrderId = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01")
                        },
                        new
                        {
                            Id = new Guid("2dce9a45-7b82-442a-b498-e6b1b9f94c51"),
                            ComboId = new Guid("933b55b5-0717-46b4-b490-cee5bb35ad6c"),
                            ItemId = new Guid("5e7cdae8-ed6b-4d68-bc60-119c4f0fc03b"),
                            OrderId = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01")
                        },
                        new
                        {
                            Id = new Guid("107a03cc-a71c-4654-a80a-48be15e62fe7"),
                            ComboId = new Guid("933b55b5-0717-46b4-b490-cee5bb35ad6c"),
                            ItemId = new Guid("cfaed14e-1807-482e-80de-6460aea6fad2"),
                            OrderId = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e5630a1-55ac-4b1f-8ed0-5fe811bf36ef"),
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("6c101303-bfc3-43c5-b388-7c97f07e5afd"),
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("219d61b0-e8fa-4c9a-8cca-06f998d3d081"),
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("a6b99322-b9ee-4d27-9fec-3a0822954d7c"),
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("840135aa-c477-4e2e-9fc4-c4ac4a999947"),
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("46dec6aa-64ed-4535-afc7-3d4eec9618ae"),
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01"),
                            CustomerId = new Guid("30da8b0b-1ad5-4cea-9799-53840137a92c"),
                            EmployeeId = new Guid("afbebdb0-0167-45c6-9c02-6641c96de136"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("7d3ceb41-193f-48ba-9cae-58f56ee500ab")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfaed14e-1807-482e-80de-6460aea6fad2"),
                            DrinkId = new Guid("219d61b0-e8fa-4c9a-8cca-06f998d3d081"),
                            OrderId = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01"),
                            Quantity = 1,
                            SizeId = new Guid("40cc063c-7222-49b5-ab71-0297fdf1f86c")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e7cdae8-ed6b-4d68-bc60-119c4f0fc03b"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("7cde64fe-31ff-4e71-ba31-14db7887ad01"),
                            Quantity = 1,
                            SideId = new Guid("3cda9fe2-5cef-4a6e-8f2c-c5a9cd7d3873"),
                            SizeId = new Guid("da663954-1bf0-47bd-ad19-6e3c3d5a3eb2")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d3ceb41-193f-48ba-9cae-58f56ee500ab"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("5d2e49b6-447c-40fe-94fb-af6d98bc007d"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("332f96b0-58e1-4eff-8fd9-0dffc866147c"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cda9fe2-5cef-4a6e-8f2c-c5a9cd7d3873"),
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("14cd4f41-a580-48c0-b450-c86e4b81b29e"),
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("df7830c7-a51a-4d17-be0b-ab66fa28050e"),
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("dfe6ec1b-9cc6-4ec4-a619-4d00776377be"),
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("32053552-2e04-45b1-9f68-3f144dd522cc"),
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("090aa5b7-d8f0-4f1b-9404-384e403ed277"),
                            Name = "small",
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("40cc063c-7222-49b5-ab71-0297fdf1f86c"),
                            Name = "medium",
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("da663954-1bf0-47bd-ad19-6e3c3d5a3eb2"),
                            Name = "large",
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf948597-f998-436b-bacd-ac718365d263"),
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("80798c5b-c0f9-478a-9638-468744a34b1d"),
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("1b917219-c9ad-4698-819f-f530bfd3cfd7"),
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("8e109b34-2711-4fa3-a3ce-cd55f62e2db6"),
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("f03ad51b-51ed-4429-8ff5-96d21d22206e"),
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("4138fbb6-eabe-4e97-8fb5-a592d108d939"),
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("560a328b-a9e0-47d9-aa36-6e497dc9ea9f"),
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("e0c661cf-f3b4-4046-bdc8-98dd94941755"),
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("988d8678-2a45-4322-b758-da6aa02013d5"),
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("02a1d1bb-b44b-4400-b1ff-ea897b0cad8b"),
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e1edc70-be57-4107-812c-6b5d8232adb3"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("b0667a6a-1da4-4503-b0e4-51ff73f3c876"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "604d1824-75a3-4369-81b8-64aaf1b9c434",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("afbebdb0-0167-45c6-9c02-6641c96de136"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "598b9523-28c4-46e3-b13a-26188c6d5b64",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("d9037379-7f34-40e1-99a8-6bee4152a651"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "5f087a32-fea6-4e60-b826-0821fc4e9989",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("30da8b0b-1ad5-4cea-9799-53840137a92c"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "d0b4ff4d-f61c-4b24-9af1-63775cdb86a6",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "b802dd37-149a-423f-a457-5d8c05594c5c",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b32f66da-6372-4f1e-b51f-9083a7dca2b9",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELbvf+DffXPv0NrbjuqeEem5OWT2rgqcpLgaqj4ExiBCXMYjXdTgoBSZadsA9efGbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74f64593-19a3-4609-b15a-1f504b82f419",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "604d1824-75a3-4369-81b8-64aaf1b9c434",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90a8498d-d5d8-4459-acd2-0c55bd1eabe1",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIGOIp3F+lBJlX1oje+RxoSRCNFjx7XmMpFqBM6L63Hkx5SOR0luXBmur3hWPcaqdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4393e0a4-41ad-4ee2-a06b-303b000869ad",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "5f087a32-fea6-4e60-b826-0821fc4e9989",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1b200c3-6bdc-4f47-a1ba-48347779bad9",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFc8ZMCO9x1Cr516+Vt42zY4GPyRA2Wo8a+8p/XaKfWVP2rfat611deh57Xu/lwaiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "651a0451-fd7f-418a-be11-64de7617a869",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "598b9523-28c4-46e3-b13a-26188c6d5b64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b0b9fc6-043c-4276-aa5c-94aa35f1a139",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEA+IvnSUdpsmFrLXn+3szAvc6Wpf0B0/R1yu8CXZ3J5LYSI+jx7MgE0VCODD/Dcg/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00e8ab9e-187c-4566-9329-a0d6d2d2b2cf",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "d0b4ff4d-f61c-4b24-9af1-63775cdb86a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e421fa3-89c2-4d38-b15c-c0264281728e",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEADcdFlRDkLinJcpX9SEd/F/gUUf0FV0lK4AkEg4at9G5KWH5NOhwlO/3ZuVNQ1+8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a80f91a-11d2-4550-b66f-4698a8b22394",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "5f087a32-fea6-4e60-b826-0821fc4e9989",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "604d1824-75a3-4369-81b8-64aaf1b9c434",
                            RoleId = "b802dd37-149a-423f-a457-5d8c05594c5c"
                        },
                        new
                        {
                            UserId = "598b9523-28c4-46e3-b13a-26188c6d5b64",
                            RoleId = "b802dd37-149a-423f-a457-5d8c05594c5c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
