// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231025153939_IsDeletedPropOnLookUpTables")]
    partial class IsDeletedPropOnLookUpTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            IsDeleted = false,
                            OrderId = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            IsDeleted = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            IsDeleted = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f911631-5111-40df-9df2-79e3a27897e2"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("24628238-7095-4574-ab5f-a7cca8bcd38d")
                        },
                        new
                        {
                            Id = new Guid("3a49ed3b-b0ec-4a6c-8dd5-1a8883880701"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("987b3c75-bd26-43dc-9fd2-e4287fa1e5b5")
                        },
                        new
                        {
                            Id = new Guid("efff9917-abc5-4c0d-baf1-66cb323e4815"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("1cce94fb-4d8a-4897-9b50-0504e0420601")
                        },
                        new
                        {
                            Id = new Guid("471a1eb5-4d11-4618-acaa-596b3f8767c3"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("06d8f575-86f7-4b7d-a093-f108b06bfe25")
                        },
                        new
                        {
                            Id = new Guid("4fe8c8f5-ac35-406b-a134-ac202422164b"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("bbd167a3-aa8a-48cf-af40-b72c5e9d21d5")
                        },
                        new
                        {
                            Id = new Guid("1706f150-a394-4c2d-89ac-916264d5b7b5"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("719f2698-34e0-406e-b927-edc8a36d2c0d")
                        },
                        new
                        {
                            Id = new Guid("dea6fea9-e588-4aab-8257-97ea60c527b6"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("719f2698-34e0-406e-b927-edc8a36d2c0d")
                        },
                        new
                        {
                            Id = new Guid("80052281-af8f-472c-b5fc-3df77310fcb2"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("dee1f361-c209-4e5f-95ba-8776e809a761")
                        },
                        new
                        {
                            Id = new Guid("d66966f6-3110-42cf-a5c0-097b4fb7188f"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("b10665c5-be5d-45c2-9848-29ba93d9640c")
                        },
                        new
                        {
                            Id = new Guid("0c41b7a6-b768-4657-8ea4-b40fbf96ce96"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            ToppingId = new Guid("9bf78170-4b49-47be-af2a-cb594588813b")
                        },
                        new
                        {
                            Id = new Guid("f3999313-5eee-4a09-a937-b7d897acf2dc"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("24628238-7095-4574-ab5f-a7cca8bcd38d")
                        },
                        new
                        {
                            Id = new Guid("b601af36-7ba6-41a6-a3aa-62ca19d70954"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("987b3c75-bd26-43dc-9fd2-e4287fa1e5b5")
                        },
                        new
                        {
                            Id = new Guid("d7056eec-1562-4a6d-97b7-d7ccbc9088c8"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("1cce94fb-4d8a-4897-9b50-0504e0420601")
                        },
                        new
                        {
                            Id = new Guid("78138d95-db65-479e-a0ac-d5ef32965538"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("06d8f575-86f7-4b7d-a093-f108b06bfe25")
                        },
                        new
                        {
                            Id = new Guid("7bf74864-f39e-4b82-bc72-41815bbf9601"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("bbd167a3-aa8a-48cf-af40-b72c5e9d21d5")
                        },
                        new
                        {
                            Id = new Guid("83951240-935d-48fb-ad0a-39c7dd3487d2"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("719f2698-34e0-406e-b927-edc8a36d2c0d")
                        },
                        new
                        {
                            Id = new Guid("80a10115-8b3c-4f0b-80bb-61ebdabf71fc"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("dee1f361-c209-4e5f-95ba-8776e809a761")
                        },
                        new
                        {
                            Id = new Guid("5957597c-fa9f-4bc4-93eb-16435cbc89cd"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("b10665c5-be5d-45c2-9848-29ba93d9640c")
                        },
                        new
                        {
                            Id = new Guid("bc0e9a6d-e1d9-421f-9eeb-5f62746d79e3"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            ToppingId = new Guid("9bf78170-4b49-47be-af2a-cb594588813b")
                        },
                        new
                        {
                            Id = new Guid("0b617b32-8c6a-44dd-b5f4-c597b8682c88"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("24628238-7095-4574-ab5f-a7cca8bcd38d")
                        },
                        new
                        {
                            Id = new Guid("3bed77b2-1bc3-4bbe-9523-e3053babb97c"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("987b3c75-bd26-43dc-9fd2-e4287fa1e5b5")
                        },
                        new
                        {
                            Id = new Guid("703c7404-cd78-423d-bfc3-07ce47903c7a"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("1cce94fb-4d8a-4897-9b50-0504e0420601")
                        },
                        new
                        {
                            Id = new Guid("990f1733-deed-42f3-8007-932cb0b4488a"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("06d8f575-86f7-4b7d-a093-f108b06bfe25")
                        },
                        new
                        {
                            Id = new Guid("fa52552b-6ad3-4c53-ab21-483561a32239"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("bbd167a3-aa8a-48cf-af40-b72c5e9d21d5")
                        },
                        new
                        {
                            Id = new Guid("de4129a4-5c35-4eeb-b3cf-b51172f69372"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("719f2698-34e0-406e-b927-edc8a36d2c0d")
                        },
                        new
                        {
                            Id = new Guid("d73a61e6-2f29-4035-a8d6-55c08ea252b3"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("719f2698-34e0-406e-b927-edc8a36d2c0d")
                        },
                        new
                        {
                            Id = new Guid("24421084-98f9-45ea-b836-be348bbe7052"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("dee1f361-c209-4e5f-95ba-8776e809a761")
                        },
                        new
                        {
                            Id = new Guid("a4234173-6954-44c4-b600-ac382c57604a"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("b10665c5-be5d-45c2-9848-29ba93d9640c")
                        },
                        new
                        {
                            Id = new Guid("8259aeb5-91a3-483d-b343-a8c0d1eafdf6"),
                            BurgerId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            ToppingId = new Guid("9bf78170-4b49-47be-af2a-cb594588813b")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed7f749b-2df9-43d9-9234-da7cde3875a3"),
                            BurgerId = new Guid("474ad82b-f1fc-4333-ad69-fead5e6d5c26"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("45fe3ce5-1bd4-4e6f-b582-8a752f0478ad"),
                            BurgerId = new Guid("d97475c5-027c-4ffa-bf5d-f46a46c08a1b"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("481897c0-5585-4052-aeb4-674dc62a9cef"),
                            ComboId = new Guid("45fe3ce5-1bd4-4e6f-b582-8a752f0478ad"),
                            ItemId = new Guid("1550ee77-ee70-421e-a798-fc7f7e17f044"),
                            OrderId = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68")
                        },
                        new
                        {
                            Id = new Guid("cbe51507-60a4-41a5-bada-9884665c46cf"),
                            ComboId = new Guid("45fe3ce5-1bd4-4e6f-b582-8a752f0478ad"),
                            ItemId = new Guid("91050da3-8aa5-4c1b-9b2b-fbc4ac9fb0b1"),
                            OrderId = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68")
                        },
                        new
                        {
                            Id = new Guid("252b4696-3e6c-4978-a6ab-598aeac4f502"),
                            ComboId = new Guid("45fe3ce5-1bd4-4e6f-b582-8a752f0478ad"),
                            ItemId = new Guid("43ad2091-5747-4ded-8f27-21c41b682c01"),
                            OrderId = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d75d32c-682c-4dd8-863f-2aa23885bfad"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("0df4044c-87a5-45ce-919b-e43cab4107c3"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("6d459456-d44a-48dd-b469-ab7ae74fc51b"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("dc3042cf-cae4-4316-9022-301207ff1031"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("34d79d8f-ce48-4096-be61-a782b6ed470a"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("17fd50de-2f0b-424d-a7ad-e47cc916f114"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68"),
                            CustomerId = new Guid("1940f1e7-2d49-4bb6-9ee8-13b57c57d4a6"),
                            EmployeeId = new Guid("d3bea2cd-0152-44b1-8b0b-a30d5c8f8804"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("d2f304e3-5746-4574-b0fc-9a9177d4c831")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43ad2091-5747-4ded-8f27-21c41b682c01"),
                            DrinkId = new Guid("6d459456-d44a-48dd-b469-ab7ae74fc51b"),
                            OrderId = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68"),
                            Quantity = 1,
                            SizeId = new Guid("31fcb550-f998-41da-8cd1-487d4b2631e0")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91050da3-8aa5-4c1b-9b2b-fbc4ac9fb0b1"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("ce778112-793e-49bf-8aeb-dfbd7be0ba68"),
                            Quantity = 1,
                            SideId = new Guid("2c5a4933-6a22-47f8-8e85-bd80cece4041"),
                            SizeId = new Guid("f2285cfc-304e-44ec-9ef0-600d0e9a6e3a")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2f304e3-5746-4574-b0fc-9a9177d4c831"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("732c1060-2342-4366-b3a3-0baa344bd927"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("44052afc-e1c7-4b9d-9add-6175216f60f8"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5a4933-6a22-47f8-8e85-bd80cece4041"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("c22c0801-63e2-4627-b8e5-480ed11ac8ae"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("612ffa60-ba57-40c3-9c08-a12b547baad5"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("e9456783-5c00-4148-bb6f-4e8dba26f0e7"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("16a982a7-87ef-442e-94e0-1297f93a0e27"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7e7d50f-43f9-4b31-9006-4371a7b1c53d"),
                            Name = "small",
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("31fcb550-f998-41da-8cd1-487d4b2631e0"),
                            Name = "medium",
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("f2285cfc-304e-44ec-9ef0-600d0e9a6e3a"),
                            Name = "large",
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("987b3c75-bd26-43dc-9fd2-e4287fa1e5b5"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("1cce94fb-4d8a-4897-9b50-0504e0420601"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("06d8f575-86f7-4b7d-a093-f108b06bfe25"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("bbd167a3-aa8a-48cf-af40-b72c5e9d21d5"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("b10665c5-be5d-45c2-9848-29ba93d9640c"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("dee1f361-c209-4e5f-95ba-8776e809a761"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("24628238-7095-4574-ab5f-a7cca8bcd38d"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("719f2698-34e0-406e-b927-edc8a36d2c0d"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("9bf78170-4b49-47be-af2a-cb594588813b"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("7608e8c2-a295-4c2d-ae9d-5b9ccbd293cd"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("080b0aae-9cb6-4a45-b6cd-7bcb2c85c02f"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("00a7dd35-2558-48ca-9ebc-300e1f602ee3"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "a76b2fb2-b1d5-46f1-a3fa-d179598dd273",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("d3bea2cd-0152-44b1-8b0b-a30d5c8f8804"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "8f27a07a-38fa-463e-9d2f-90dcf02cbed0",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("5040a619-9551-4cba-97cd-49f3b3a344f3"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "0369d568-16f9-4001-b70c-8b959d506f2c",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("1940f1e7-2d49-4bb6-9ee8-13b57c57d4a6"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "ecb4346b-f284-4ab3-9b5e-3cdb0c4d9557",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "4731b957-71fe-413a-abaa-c1b0f4b8c778",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d4d6dd0-178c-4d4a-99fe-45a3c4118cca",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEKycxU3fUJTHfHCsZY+OyH0BtDxm/dlquirZnGco/9v77yjM2NLyP9muziXiRmY6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6df8c882-2046-45ce-bf32-fbe49d36f073",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a76b2fb2-b1d5-46f1-a3fa-d179598dd273",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d540a100-7fca-492a-80e8-de6f28a8ddb6",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENAZbHIsBNKRjiuekmWTsE9HQn7PFUXQOr3NTyDx4Yh5U2SDprm6yS0pSH0aKPc6MQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dee9eb66-e6b8-4181-aea2-e6d06c9ae26f",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "0369d568-16f9-4001-b70c-8b959d506f2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c393bcf8-71da-422d-b650-1354ba562efd",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIhoycBlvof7s7DxwcrxIPnYby/I4yKoTbT/SpBaMRYxef1bn9v8I9boOy18jMdbPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "759b1d85-8ca2-454b-b34c-5e5d29f562d9",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "8f27a07a-38fa-463e-9d2f-90dcf02cbed0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7adac26-c434-4ac2-be06-6e587285185b",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHIZcqu2s0PH1M8TqW0H/NwZLziFO/HdgDEjqt1tQLZpHGnCcsKZryO6bmTmu7nYvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc418501-b896-44cd-820c-2301ab6771fb",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "ecb4346b-f284-4ab3-9b5e-3cdb0c4d9557",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfece248-9a1f-44c5-a763-60d558e7103b",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGrlpufv49MGgW0xntEAo7XWETkAywgy3wOUrkHvs94nBknXyrwoZZqvFcVbdh6D4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a0f1bd4-a9ac-45c2-9837-24761dfb88a3",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "0369d568-16f9-4001-b70c-8b959d506f2c",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "a76b2fb2-b1d5-46f1-a3fa-d179598dd273",
                            RoleId = "4731b957-71fe-413a-abaa-c1b0f4b8c778"
                        },
                        new
                        {
                            UserId = "8f27a07a-38fa-463e-9d2f-90dcf02cbed0",
                            RoleId = "4731b957-71fe-413a-abaa-c1b0f4b8c778"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
