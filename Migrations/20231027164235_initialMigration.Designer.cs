// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231027164235_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            IsDeleted = false,
                            OrderId = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            IsDeleted = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            IsDeleted = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33047f9a-e740-4fc0-81cf-84d2d0afd4c5"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("47605247-b3c4-445a-a62c-cc08f938c1a4")
                        },
                        new
                        {
                            Id = new Guid("59f79e4d-441c-4e5f-a7d0-65b22957fc03"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("3cdcab2b-8e87-473a-8d79-cbaf65010e77")
                        },
                        new
                        {
                            Id = new Guid("d0374f34-2ff3-43bd-8821-7fb3faabc2ff"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("51bae8ec-0e4c-4e62-aa73-8ea1248139c4")
                        },
                        new
                        {
                            Id = new Guid("1894f331-49e3-48d7-b4a3-5ef8897ab56b"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("292c221d-94f4-4bb5-843c-dbf66a2d10f3")
                        },
                        new
                        {
                            Id = new Guid("920c3d25-0710-4cbe-be30-0cff1e7b49d7"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("19d53262-c2ba-4c5b-80f6-2cb0c70f468c")
                        },
                        new
                        {
                            Id = new Guid("c42bc2c5-6155-47ac-8f55-48100b1cd383"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("1dc23006-68fb-4fa3-b4cc-0d3897011299")
                        },
                        new
                        {
                            Id = new Guid("1f57633c-9243-4d66-a37f-6828cb823bf4"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("1dc23006-68fb-4fa3-b4cc-0d3897011299")
                        },
                        new
                        {
                            Id = new Guid("45e23aa5-d296-442a-8344-375b5802ae45"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("3835b77e-d016-48e3-8f68-d0e9ab5f8739")
                        },
                        new
                        {
                            Id = new Guid("0e57fc9b-19e5-4ab3-acab-ee0c58ad4628"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("ce3dcf04-d1d7-4152-876a-e96782569b08")
                        },
                        new
                        {
                            Id = new Guid("9294fc26-9698-47c9-82dd-0ece19c7c37e"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Extra = false,
                            ToppingId = new Guid("a7527fc4-86d7-4730-a97a-18b8b554a77e")
                        },
                        new
                        {
                            Id = new Guid("0bcbedd2-99f8-4b08-86f0-90edce6dbd52"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("47605247-b3c4-445a-a62c-cc08f938c1a4")
                        },
                        new
                        {
                            Id = new Guid("a739380c-0887-4a5a-835f-f390457408b5"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("3cdcab2b-8e87-473a-8d79-cbaf65010e77")
                        },
                        new
                        {
                            Id = new Guid("ecf72ae4-79f0-450c-b3ce-cfe2c201455b"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("51bae8ec-0e4c-4e62-aa73-8ea1248139c4")
                        },
                        new
                        {
                            Id = new Guid("a02ca4f5-f98a-4c5e-8b2c-f053c74983cf"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("292c221d-94f4-4bb5-843c-dbf66a2d10f3")
                        },
                        new
                        {
                            Id = new Guid("c1031eba-a255-47bd-9a4c-b76f7b65dc10"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("19d53262-c2ba-4c5b-80f6-2cb0c70f468c")
                        },
                        new
                        {
                            Id = new Guid("6dae9d4d-ec46-458b-a67f-7fb1f285c54b"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("1dc23006-68fb-4fa3-b4cc-0d3897011299")
                        },
                        new
                        {
                            Id = new Guid("92aff036-6066-48e7-bc44-b5f06462a60a"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("3835b77e-d016-48e3-8f68-d0e9ab5f8739")
                        },
                        new
                        {
                            Id = new Guid("b6ce29c1-6ac6-4ffe-8841-0fc4216987e5"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("ce3dcf04-d1d7-4152-876a-e96782569b08")
                        },
                        new
                        {
                            Id = new Guid("29058c1a-53bb-4c64-9b85-ebffe72c3cbd"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Extra = false,
                            ToppingId = new Guid("a7527fc4-86d7-4730-a97a-18b8b554a77e")
                        },
                        new
                        {
                            Id = new Guid("67422b0c-11b2-4283-8181-6293e42f578b"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("47605247-b3c4-445a-a62c-cc08f938c1a4")
                        },
                        new
                        {
                            Id = new Guid("d19085b0-175a-4179-b327-503f0e18af0f"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("3cdcab2b-8e87-473a-8d79-cbaf65010e77")
                        },
                        new
                        {
                            Id = new Guid("08a85525-16ad-4c58-841a-f758dff3f1d6"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("51bae8ec-0e4c-4e62-aa73-8ea1248139c4")
                        },
                        new
                        {
                            Id = new Guid("63b68222-9bb5-4769-adc0-e30c1ae2c77c"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("292c221d-94f4-4bb5-843c-dbf66a2d10f3")
                        },
                        new
                        {
                            Id = new Guid("8c28630d-5b27-4c93-b12f-ae30562c45c8"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("19d53262-c2ba-4c5b-80f6-2cb0c70f468c")
                        },
                        new
                        {
                            Id = new Guid("ed645e77-bc25-45e9-b429-a93c7f9d29e6"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("1dc23006-68fb-4fa3-b4cc-0d3897011299")
                        },
                        new
                        {
                            Id = new Guid("cd8008d6-4d57-47b4-9391-c5b366e487f9"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("1dc23006-68fb-4fa3-b4cc-0d3897011299")
                        },
                        new
                        {
                            Id = new Guid("cbf27de8-9c74-481d-81f3-6f71796e3fd1"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("3835b77e-d016-48e3-8f68-d0e9ab5f8739")
                        },
                        new
                        {
                            Id = new Guid("6fc7712a-210a-4635-b1e5-0b2c5e249dfe"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("ce3dcf04-d1d7-4152-876a-e96782569b08")
                        },
                        new
                        {
                            Id = new Guid("f8ebaeb0-bf22-4efb-8479-fa857a7eb4e9"),
                            BurgerId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            Extra = false,
                            ToppingId = new Guid("a7527fc4-86d7-4730-a97a-18b8b554a77e")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e44b6e20-493b-4f8f-86bb-dccc29a4f3fe"),
                            BurgerId = new Guid("52821fc6-3b27-41c5-9bdf-d65b3493eb55"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("002ea8cf-c0cb-4df9-a01a-4f8643355a32"),
                            BurgerId = new Guid("48181d82-9754-4f60-98e9-d845efdedf0c"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f433746-1e6f-4b8a-89ef-12a5b42bed3c"),
                            ComboId = new Guid("002ea8cf-c0cb-4df9-a01a-4f8643355a32"),
                            ItemId = new Guid("fc93e2c1-3eda-48b2-9c72-a90895fa9942"),
                            OrderId = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb")
                        },
                        new
                        {
                            Id = new Guid("ad2c73b8-06e4-4bda-b506-3a01dc5d818b"),
                            ComboId = new Guid("002ea8cf-c0cb-4df9-a01a-4f8643355a32"),
                            ItemId = new Guid("2fa7d04c-3cb8-4e80-844f-f7c3e870be9a"),
                            OrderId = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb")
                        },
                        new
                        {
                            Id = new Guid("7bf1755e-0b70-4533-9bec-c61647a5f54c"),
                            ComboId = new Guid("002ea8cf-c0cb-4df9-a01a-4f8643355a32"),
                            ItemId = new Guid("034c2400-e07a-4642-8147-e1a4f5f27333"),
                            OrderId = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00856106-03e6-4b79-928b-adc13311f92c"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("4dfe9945-5b5c-4ac3-a693-3391d888dfed"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("d28b90a8-fe7c-463d-9ddb-7af68864ff45"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("a728417d-4b6f-4b11-b0e6-cf3e4c7f9b0c"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("e03f0e6b-699c-4452-a3bf-a23f528cec7c"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("9ccf65fe-6216-4570-9889-e6661e3334a4"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb"),
                            CustomerId = new Guid("12c557a5-c321-4131-b0bd-b1520b68655b"),
                            EmployeeId = new Guid("23170bda-5e4e-4183-a1c3-1cf6ac1d9059"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("c43dac35-214d-45ab-9777-237818dfbbcf")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("034c2400-e07a-4642-8147-e1a4f5f27333"),
                            DrinkId = new Guid("d28b90a8-fe7c-463d-9ddb-7af68864ff45"),
                            OrderId = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb"),
                            Quantity = 1,
                            SizeId = new Guid("373462c5-f90b-4125-9a59-efc3692b1d7a")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fa7d04c-3cb8-4e80-844f-f7c3e870be9a"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("532a218c-744b-4f9d-9af1-ec7d96c489cb"),
                            Quantity = 1,
                            SideId = new Guid("4ccd58b2-57de-47af-98ef-da75a315ab78"),
                            SizeId = new Guid("cc92aca0-fe16-4b18-88a0-6c798a508469")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c43dac35-214d-45ab-9777-237818dfbbcf"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("8b9196b0-3cf7-45ae-95ec-cc369c34464b"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("2a9b9b55-22c0-44b8-83cd-cf06a16982c0"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ccd58b2-57de-47af-98ef-da75a315ab78"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("e9e89f13-e3d3-4bfd-ab1d-a6b7dd6bdc0e"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("18614fbd-91ce-4329-80dc-754fabe4bf4f"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("b59f5921-fb41-4c89-beae-340473a25990"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("2727c75e-92b9-4e97-a576-e0957fbd2c5f"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24428db6-9d06-45f3-a02f-3eb06cf63669"),
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("373462c5-f90b-4125-9a59-efc3692b1d7a"),
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("cc92aca0-fe16-4b18-88a0-6c798a508469"),
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cdcab2b-8e87-473a-8d79-cbaf65010e77"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("51bae8ec-0e4c-4e62-aa73-8ea1248139c4"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("292c221d-94f4-4bb5-843c-dbf66a2d10f3"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("19d53262-c2ba-4c5b-80f6-2cb0c70f468c"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("ce3dcf04-d1d7-4152-876a-e96782569b08"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("3835b77e-d016-48e3-8f68-d0e9ab5f8739"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("47605247-b3c4-445a-a62c-cc08f938c1a4"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("1dc23006-68fb-4fa3-b4cc-0d3897011299"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("a7527fc4-86d7-4730-a97a-18b8b554a77e"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("62a34a87-60ce-443c-90f5-108dbe4e2dd7"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b78f00c3-e837-48dc-a1ed-db755bcf5263"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("ff1c6961-8579-49a0-ba4f-14944976a561"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "f45c916f-1254-4845-8c6f-aa2a8c73fab9",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("23170bda-5e4e-4183-a1c3-1cf6ac1d9059"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "fda0ed28-b9ca-40e6-9037-eba5832459b9",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("fe06653f-cbde-456e-a447-aa6f1480d219"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "adfbdde0-4137-4da0-a236-940faca4bbf0",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("12c557a5-c321-4131-b0bd-b1520b68655b"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "b06e00ba-4ca2-467e-9dab-0cc033063a8e",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "76f3405d-c548-4d39-8df5-5fd105406eaf",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65ab3a02-2cc4-4791-8c13-0f0162c9764c",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAkRP4XHi4knBHgNS10YpjPQeWgeHqQwtfEUX8MHLeMvkHm6WZsumu4M/gAsKCEHxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "904bbfb2-9b00-434a-9c3f-b37eee6a81c1",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "f45c916f-1254-4845-8c6f-aa2a8c73fab9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c055536-8787-4f13-9dcd-17acaa2acd7a",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOlEecGwv7Pcx3USDFtVY+jLr8hCsxzCoDgYAMKg2u5cYqVSUAwWBk5pzvJ2lrPnQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c9118dd-716c-4a66-a4d9-9ef08ca250de",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "adfbdde0-4137-4da0-a236-940faca4bbf0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f939765-72ee-472c-a530-dc6d89dd3a60",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDeBs0VYHb6pXMB95/K4xEffRFgQAXnvIrCi050U3rZpIfnONHG+MLTrNhc8wAf1+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b42ed69-8dc9-4cd7-b9d1-ba7a1e26cb6b",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "fda0ed28-b9ca-40e6-9037-eba5832459b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59759cd5-18e7-4c58-8fab-b6cf76e8dc30",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELHDwJEu4B7zKY2YaPurq3Pf/UEJms6gTMSOXMhpV/PjMKyCtplCn5++pYv3mHKZrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73dc81cb-a4c6-4320-ac0f-4234c59972c3",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "b06e00ba-4ca2-467e-9dab-0cc033063a8e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ef0eec0-fcf0-47f9-ae8a-5acb389a1d5a",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGUGk35h8rYEHkuxHbkN+lQeCnAMaNOJ3ZIJ6Litznv2DJlLaBSpPXGLyjNKxSjNdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c88b737e-46b0-402d-9a4b-a979b50cf764",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "adfbdde0-4137-4da0-a236-940faca4bbf0",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "f45c916f-1254-4845-8c6f-aa2a8c73fab9",
                            RoleId = "76f3405d-c548-4d39-8df5-5fd105406eaf"
                        },
                        new
                        {
                            UserId = "fda0ed28-b9ca-40e6-9037-eba5832459b9",
                            RoleId = "76f3405d-c548-4d39-8df5-5fd105406eaf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
