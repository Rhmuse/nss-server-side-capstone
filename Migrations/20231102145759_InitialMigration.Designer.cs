// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231102145759_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            IsDeleted = false,
                            IsInCombo = false,
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("8df72178-8610-458d-951b-22660fb59a78"),
                            IsDeleted = false,
                            IsInCombo = true,
                            OrderComboId = new Guid("da302348-b66f-49d3-9f70-df565cea5979"),
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0040169f-66d8-4d62-b7b8-89930979731e"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("ec08ce80-a177-4af7-9b8b-12efc89b710c")
                        },
                        new
                        {
                            Id = new Guid("0ff9fcae-c951-41f9-8964-ee698f8042f3"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("0f0c3ac1-eb05-419f-8a2d-79075ae3cfa9")
                        },
                        new
                        {
                            Id = new Guid("bba9d335-cdec-4613-b62c-6f03f76b39f8"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("51cd90c8-9d5e-40f1-89d4-cc73593801ca")
                        },
                        new
                        {
                            Id = new Guid("57d80b1d-0536-4501-bd1e-a16bf5402ff2"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("c9d4a9f6-aade-4152-8bf9-ef0ecb715c78")
                        },
                        new
                        {
                            Id = new Guid("fe4bbe2c-bf98-4b19-8299-7160563c145f"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("d99d2f3d-5c9d-4421-995d-4220d9ef87f7")
                        },
                        new
                        {
                            Id = new Guid("f4bc30f8-e4a0-4b20-bb61-b5d26a9319c1"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481")
                        },
                        new
                        {
                            Id = new Guid("abf541c4-54f2-48cc-af48-72934ad56007"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481")
                        },
                        new
                        {
                            Id = new Guid("c7439c02-c77f-430b-b859-19b4788e9c43"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("18d26333-b93a-4fec-b635-132766a4a954")
                        },
                        new
                        {
                            Id = new Guid("ca0e1a92-14c8-42e3-8868-15f03a9abdcc"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("0f535105-ec3f-4775-855d-777ea015d968")
                        },
                        new
                        {
                            Id = new Guid("b27686ff-837f-4700-b50a-4b89197829a8"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("568cde3e-7e01-4ace-9bb4-434fa6068fd5")
                        },
                        new
                        {
                            Id = new Guid("be440dc1-be24-4b58-b600-8d9f6e1bd206"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Extra = false,
                            ToppingId = new Guid("01aecf42-b275-439f-844e-3fe8f9a5c581")
                        },
                        new
                        {
                            Id = new Guid("78e67cf0-62cb-4778-89c0-f886f247ded8"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("ec08ce80-a177-4af7-9b8b-12efc89b710c")
                        },
                        new
                        {
                            Id = new Guid("2e86b2d3-4a5d-48d1-92f0-1e1847badb8d"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("0f0c3ac1-eb05-419f-8a2d-79075ae3cfa9")
                        },
                        new
                        {
                            Id = new Guid("03ddcddd-2a9b-4e3a-9d8a-c683e2ac957d"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("51cd90c8-9d5e-40f1-89d4-cc73593801ca")
                        },
                        new
                        {
                            Id = new Guid("5007872b-e704-4168-ac4a-0490fca2b0d3"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("c9d4a9f6-aade-4152-8bf9-ef0ecb715c78")
                        },
                        new
                        {
                            Id = new Guid("447924fb-d759-44e0-90b7-46c86949719e"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("d99d2f3d-5c9d-4421-995d-4220d9ef87f7")
                        },
                        new
                        {
                            Id = new Guid("9882be71-6325-42e1-9a22-9eb673ba8d6b"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481")
                        },
                        new
                        {
                            Id = new Guid("35bd775e-75e1-4256-9ccf-aa89cf402e9e"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("18d26333-b93a-4fec-b635-132766a4a954")
                        },
                        new
                        {
                            Id = new Guid("ee2aa7e5-3075-44f8-8696-3ceb8ecec6bc"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("0f535105-ec3f-4775-855d-777ea015d968")
                        },
                        new
                        {
                            Id = new Guid("73ae4af4-fad5-416f-ab37-0a0429af58c0"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("568cde3e-7e01-4ace-9bb4-434fa6068fd5")
                        },
                        new
                        {
                            Id = new Guid("6d7e6c9c-9b91-433f-9bf4-a0ba58900b74"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Extra = false,
                            ToppingId = new Guid("01aecf42-b275-439f-844e-3fe8f9a5c581")
                        },
                        new
                        {
                            Id = new Guid("6ca8d8d4-91cc-408c-a38f-363557bdc914"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("ec08ce80-a177-4af7-9b8b-12efc89b710c")
                        },
                        new
                        {
                            Id = new Guid("29c2736a-82aa-4724-9479-25c5b13daa57"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("0f0c3ac1-eb05-419f-8a2d-79075ae3cfa9")
                        },
                        new
                        {
                            Id = new Guid("4228a80a-4fa3-441f-b313-a3012f69be6e"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("51cd90c8-9d5e-40f1-89d4-cc73593801ca")
                        },
                        new
                        {
                            Id = new Guid("0748ffe0-02d4-427e-b6b7-3605d2ae9a33"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("c9d4a9f6-aade-4152-8bf9-ef0ecb715c78")
                        },
                        new
                        {
                            Id = new Guid("b02e44e2-473e-4ee9-bdab-43aa490784f4"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("d99d2f3d-5c9d-4421-995d-4220d9ef87f7")
                        },
                        new
                        {
                            Id = new Guid("a0b05609-67e3-4034-adfe-3aa2605fffde"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481")
                        },
                        new
                        {
                            Id = new Guid("0e0c9e75-758f-434e-9ed7-e365b1a1e1e9"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481")
                        },
                        new
                        {
                            Id = new Guid("901defbf-9170-4428-ad56-9eb2a1f72d4c"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("18d26333-b93a-4fec-b635-132766a4a954")
                        },
                        new
                        {
                            Id = new Guid("ce917225-9d6e-4c34-99a7-afb520699411"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("0f535105-ec3f-4775-855d-777ea015d968")
                        },
                        new
                        {
                            Id = new Guid("dff53f96-fb7f-4fbf-962c-a8bd478b6fba"),
                            BurgerId = new Guid("bab8278d-8128-4e46-8286-ebcfe8697688"),
                            Extra = false,
                            ToppingId = new Guid("568cde3e-7e01-4ace-9bb4-434fa6068fd5")
                        },
                        new
                        {
                            Id = new Guid("01181cc7-ba9c-4a07-819a-cda33e5be0e5"),
                            BurgerId = new Guid("8df72178-8610-458d-951b-22660fb59a78"),
                            Extra = false,
                            ToppingId = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481")
                        },
                        new
                        {
                            Id = new Guid("8a070f04-714e-499d-a8ed-097921108d4d"),
                            BurgerId = new Guid("8df72178-8610-458d-951b-22660fb59a78"),
                            Extra = false,
                            ToppingId = new Guid("18d26333-b93a-4fec-b635-132766a4a954")
                        },
                        new
                        {
                            Id = new Guid("9882ebc2-8ace-48cc-87fe-4aae7873637e"),
                            BurgerId = new Guid("8df72178-8610-458d-951b-22660fb59a78"),
                            Extra = false,
                            ToppingId = new Guid("0f535105-ec3f-4775-855d-777ea015d968")
                        },
                        new
                        {
                            Id = new Guid("71cd43bd-5d2a-4d89-850a-d7bbd8ee6861"),
                            BurgerId = new Guid("8df72178-8610-458d-951b-22660fb59a78"),
                            Extra = false,
                            ToppingId = new Guid("568cde3e-7e01-4ace-9bb4-434fa6068fd5")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ceda4ef-f547-4fb4-8d3e-43dc4dfe3d50"),
                            BurgerId = new Guid("bacce980-51f5-49cb-b50d-aa3c0eb5749a"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("28192288-b6cc-4099-8fc3-5baad590f20e"),
                            BurgerId = new Guid("62bc247d-f535-4802-9098-5250f4508c7a"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a5d4ff3-47f7-4ce4-9395-360304dc754c"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("e417849c-0d77-4a4f-9674-2a9b10a8b359"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("c144232a-11a1-4276-9608-b4df709f2654"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("ee2391c7-c929-48fd-822e-6b5788ed186c"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("132a8365-21c4-4f89-9fe7-5a04dc8e0498"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("c5783a22-d9f2-4497-bca9-b3ec8a623913"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            CustomerId = new Guid("a7700b2a-0a86-422e-a8fd-13757804d63d"),
                            EmployeeId = new Guid("a0a87211-957d-4c04-a9b9-e939b352ad38"),
                            OrderTime = new DateTime(2023, 11, 2, 9, 57, 59, 474, DateTimeKind.Local).AddTicks(729),
                            OrderTypeId = new Guid("cb8b2468-20fb-4ec6-920f-831cc5617cb5")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCombos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da302348-b66f-49d3-9f70-df565cea5979"),
                            ComboId = new Guid("1ceda4ef-f547-4fb4-8d3e-43dc4dfe3d50"),
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("687e9001-9d46-4d77-9568-ee5bfbb6bc9a"),
                            DrinkId = new Guid("c144232a-11a1-4276-9608-b4df709f2654"),
                            IsInCombo = false,
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            Quantity = 1,
                            SizeId = new Guid("725f9403-fe15-4844-b64a-2a59b166232b")
                        },
                        new
                        {
                            Id = new Guid("e45d1bdd-6f04-4da9-a3be-adb588fa1017"),
                            DrinkId = new Guid("3a5d4ff3-47f7-4ce4-9395-360304dc754c"),
                            IsInCombo = true,
                            OrderComboId = new Guid("da302348-b66f-49d3-9f70-df565cea5979"),
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            Quantity = 1,
                            SizeId = new Guid("725f9403-fe15-4844-b64a-2a59b166232b")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("edc402c5-7da5-44e3-9a31-96c91a24c6c3"),
                            IsInCombo = false,
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            Quantity = 1,
                            SideId = new Guid("f8e7d283-cdae-4835-b3db-ce06bb89eab2"),
                            SizeId = new Guid("60c0635f-4036-40cb-9228-d9dd978b31eb")
                        },
                        new
                        {
                            Id = new Guid("0d5b9984-ec10-4f2f-9c69-58c30af11497"),
                            IsInCombo = true,
                            OrderComboId = new Guid("da302348-b66f-49d3-9f70-df565cea5979"),
                            OrderId = new Guid("01c62878-6406-4bff-b412-892bf759c3cb"),
                            Quantity = 1,
                            SideId = new Guid("7fd40224-091e-4360-86ec-4312b565adf2"),
                            SizeId = new Guid("60c0635f-4036-40cb-9228-d9dd978b31eb")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb8b2468-20fb-4ec6-920f-831cc5617cb5"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("98bb1597-5519-487d-a043-65dfadfc3273"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("1e60a8f7-11de-4005-83ba-ad52659a3309"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8e7d283-cdae-4835-b3db-ce06bb89eab2"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("bf8bbbd5-142c-4140-8c10-1e02d992ae95"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("7fd40224-091e-4360-86ec-4312b565adf2"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("5bb61c67-aafe-4c1a-b471-80070df642d4"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("96ab5baa-a1af-44ec-9c93-5ce45c1733a9"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("726704d8-3efb-4cf8-a966-fc4699b68f85"),
                            IsDeleted = false,
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("725f9403-fe15-4844-b64a-2a59b166232b"),
                            IsDeleted = false,
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("60c0635f-4036-40cb-9228-d9dd978b31eb"),
                            IsDeleted = false,
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f0c3ac1-eb05-419f-8a2d-79075ae3cfa9"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("51cd90c8-9d5e-40f1-89d4-cc73593801ca"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("c9d4a9f6-aade-4152-8bf9-ef0ecb715c78"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("d99d2f3d-5c9d-4421-995d-4220d9ef87f7"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("0f535105-ec3f-4775-855d-777ea015d968"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("18d26333-b93a-4fec-b635-132766a4a954"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("ec08ce80-a177-4af7-9b8b-12efc89b710c"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("df08ec40-e45e-42ce-8a4f-f65855e6c481"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("568cde3e-7e01-4ace-9bb4-434fa6068fd5"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("01aecf42-b275-439f-844e-3fe8f9a5c581"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a960e6a6-b846-4504-9b99-63a497243d43"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("35d9771d-f425-4032-9d3d-9fcb9a6c6a8c"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "26ee909a-154f-4cb1-b98c-d812e600c2e6",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("a0a87211-957d-4c04-a9b9-e939b352ad38"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "31e844bd-bfaa-4991-a837-c986207d12f8",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("0123d485-450b-4b30-9f67-a054feeb1a22"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "11c3300a-8733-4a71-90ae-8136545d3722",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("a7700b2a-0a86-422e-a8fd-13757804d63d"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "c1e902ba-dbce-4bea-b9b7-a6ffdba7ce36",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "7463fc2a-50d4-4fef-aef5-d17538ccb6d3",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d30f273-7de6-4402-acb4-3303c770f30c",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECNOYw5wWHWfdZ1jU0CqBTT2RUX7nVKFz1C7x7JxfgwD2sx7G7fEi3rHYn1yIQXUmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31549cec-a262-4f03-b9e2-f96a78c95fad",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "26ee909a-154f-4cb1-b98c-d812e600c2e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b987b376-ce24-4b52-aa6d-cf3e69d100af",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPN5nc/HzloVxWjvAKt8GpkzmCTuqmI8DwERzygmYMzcpNF1IvU78FMooOpRjlJ/oQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9194d874-35e2-4d62-8253-17ec2cf74cb9",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "11c3300a-8733-4a71-90ae-8136545d3722",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23e3553a-44e7-4802-a07a-c537d354f883",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEC7pkbmW+Gea2JVvTUWFtNzsfYWL3D5/ar7GBOQW4cAci9HqaylrJ560SOye9recKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "257417cf-04a9-4f57-ad53-991d6b082baf",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "31e844bd-bfaa-4991-a837-c986207d12f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e48f66a9-d7fe-4ebb-a0cb-a45b618c6361",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHvggcyfwNk3EMMonvnwg0Eh3TN4nVHVC6H818h9jThRxdCUX/mw3weswF0tBF2bug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f54413ef-bab3-4535-b7d3-473e97e820ec",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "c1e902ba-dbce-4bea-b9b7-a6ffdba7ce36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e97ff079-35e0-438f-ac00-651eebe85d4a",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAED4KFd2m2t0hEuO5KxLIxK9441nEerPBS4bN3rPAcwUUpj9hqFlCB1JEIzJ+Jk8exg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "536ec80f-a462-4523-884f-b639663c0819",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "11c3300a-8733-4a71-90ae-8136545d3722",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "26ee909a-154f-4cb1-b98c-d812e600c2e6",
                            RoleId = "7463fc2a-50d4-4fef-aef5-d17538ccb6d3"
                        },
                        new
                        {
                            UserId = "31e844bd-bfaa-4991-a837-c986207d12f8",
                            RoleId = "7463fc2a-50d4-4fef-aef5-d17538ccb6d3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("Burger")
                        .HasForeignKey("KrustyKrab.Models.Burger", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("OrderCombos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderDrink")
                        .HasForeignKey("KrustyKrab.Models.OrderDrink", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderSide")
                        .HasForeignKey("KrustyKrab.Models.OrderSide", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("OrderCombos");

                    b.Navigation("Sides");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Navigation("Burger");

                    b.Navigation("OrderDrink");

                    b.Navigation("OrderSide");
                });
#pragma warning restore 612, 618
        }
    }
}
