// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231023150551_addSize")]
    partial class addSize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            OrderId = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf62a835-7ccb-4e95-b69c-0e6a06e8854f"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("2928acdc-61c3-4f5a-8a90-df82e463fca8")
                        },
                        new
                        {
                            Id = new Guid("c89831b1-79a7-4901-89c4-0418f854f5cb"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("8e968e34-174b-406d-9ac4-1abee932ae0a")
                        },
                        new
                        {
                            Id = new Guid("77b00702-11c2-433a-a301-95fa26334727"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("b830c0f1-6ad2-493f-a01d-968ea6b56bcf")
                        },
                        new
                        {
                            Id = new Guid("f231dc45-4b80-4c1b-b66a-26c85ae6a262"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("df6c8a94-78f0-435b-a5f5-380c13ef6c28")
                        },
                        new
                        {
                            Id = new Guid("52c18c64-12db-41e1-863e-ad2233437899"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("05b9ebc6-06c0-4d9b-9dc2-f72c2f19fa8f")
                        },
                        new
                        {
                            Id = new Guid("e7eaf4d0-117d-4627-aca5-14ec4ec32bcf"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("de21ce8f-3a35-4b70-90ad-3fa652f34b04")
                        },
                        new
                        {
                            Id = new Guid("d77d1cc1-c33d-4cb7-83d8-4fa44b980fb3"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("de21ce8f-3a35-4b70-90ad-3fa652f34b04")
                        },
                        new
                        {
                            Id = new Guid("b9616298-cfb2-4b21-b833-adadd1509ee0"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("d81d3bf7-6eef-4ee7-beda-870438505893")
                        },
                        new
                        {
                            Id = new Guid("ba73eec5-6512-4966-8c8b-aea40def8a3c"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("d5bad07c-32bd-4ae1-bc0f-5912705fcfd3")
                        },
                        new
                        {
                            Id = new Guid("826dd43f-d766-42a8-97b5-ed7f66dd0ca0"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            ToppingId = new Guid("2ba4b445-4a4d-4bc6-aa6b-320c4170cb26")
                        },
                        new
                        {
                            Id = new Guid("cad1aeed-1c85-45a8-b140-a958a9186ea9"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("2928acdc-61c3-4f5a-8a90-df82e463fca8")
                        },
                        new
                        {
                            Id = new Guid("02ce495c-1104-44d2-a682-25634e75545b"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("8e968e34-174b-406d-9ac4-1abee932ae0a")
                        },
                        new
                        {
                            Id = new Guid("f366d530-99fe-436d-996c-729a0eee1a6d"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("b830c0f1-6ad2-493f-a01d-968ea6b56bcf")
                        },
                        new
                        {
                            Id = new Guid("dc1f6b78-8394-4069-8730-078bbbf7c8c5"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("df6c8a94-78f0-435b-a5f5-380c13ef6c28")
                        },
                        new
                        {
                            Id = new Guid("19b33277-2c60-41d5-ae25-b7d86d3b3cf3"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("05b9ebc6-06c0-4d9b-9dc2-f72c2f19fa8f")
                        },
                        new
                        {
                            Id = new Guid("12796316-2757-451e-bfa2-2882c854504d"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("de21ce8f-3a35-4b70-90ad-3fa652f34b04")
                        },
                        new
                        {
                            Id = new Guid("471a77d5-7ceb-4265-a030-574183dbedf4"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("d81d3bf7-6eef-4ee7-beda-870438505893")
                        },
                        new
                        {
                            Id = new Guid("146aff6a-57ff-45b4-8388-a474d6ec4539"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("d5bad07c-32bd-4ae1-bc0f-5912705fcfd3")
                        },
                        new
                        {
                            Id = new Guid("435bec6e-3cb3-4e2a-bdae-972ba27c9546"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            ToppingId = new Guid("2ba4b445-4a4d-4bc6-aa6b-320c4170cb26")
                        },
                        new
                        {
                            Id = new Guid("11f5a471-ed15-4c6a-b354-fd8096c9fa67"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("2928acdc-61c3-4f5a-8a90-df82e463fca8")
                        },
                        new
                        {
                            Id = new Guid("dee4a18d-0ff9-440d-97e8-82553c31841e"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("8e968e34-174b-406d-9ac4-1abee932ae0a")
                        },
                        new
                        {
                            Id = new Guid("daa47ad3-3005-42d4-84b3-adffc892dccb"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("b830c0f1-6ad2-493f-a01d-968ea6b56bcf")
                        },
                        new
                        {
                            Id = new Guid("aef04fa3-11d9-4b2e-9679-5b4e3cb4cf03"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("df6c8a94-78f0-435b-a5f5-380c13ef6c28")
                        },
                        new
                        {
                            Id = new Guid("41a595f9-5e5e-4e8b-b5b3-27f3764522c4"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("05b9ebc6-06c0-4d9b-9dc2-f72c2f19fa8f")
                        },
                        new
                        {
                            Id = new Guid("d3b0929a-7d3e-4ecf-a7cf-6c19149472b7"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("de21ce8f-3a35-4b70-90ad-3fa652f34b04")
                        },
                        new
                        {
                            Id = new Guid("095f223a-cca3-401f-b395-5ac07c47073f"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("de21ce8f-3a35-4b70-90ad-3fa652f34b04")
                        },
                        new
                        {
                            Id = new Guid("1c5bb4a4-0e0f-4a1f-ae8f-326e2b3316d3"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("d81d3bf7-6eef-4ee7-beda-870438505893")
                        },
                        new
                        {
                            Id = new Guid("33be3a28-aea3-4d69-b918-4805ba670941"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("d5bad07c-32bd-4ae1-bc0f-5912705fcfd3")
                        },
                        new
                        {
                            Id = new Guid("cafe6bc8-9072-4f32-a67b-ea2604dae138"),
                            BurgerId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            ToppingId = new Guid("2ba4b445-4a4d-4bc6-aa6b-320c4170cb26")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fbefc0c-9c05-4b16-ac90-2819c458e1ef"),
                            BurgerId = new Guid("5c768986-178a-464c-af20-0d27bcecfd38"),
                            Discount = -1f,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("c0f13c93-71ce-4655-92c5-63a8b31c02cd"),
                            BurgerId = new Guid("b715cea4-1005-48b9-84bc-3640a24a0e7d"),
                            Discount = -1.25f,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3bc7349-9147-45ae-b899-8ee786ec4888"),
                            ComboId = new Guid("c0f13c93-71ce-4655-92c5-63a8b31c02cd"),
                            ItemId = new Guid("68a40cd8-8101-4b94-ad85-b8166feb1a5f"),
                            OrderId = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32")
                        },
                        new
                        {
                            Id = new Guid("c5c844e3-a3da-4b47-a43e-ada5a71fd7c3"),
                            ComboId = new Guid("c0f13c93-71ce-4655-92c5-63a8b31c02cd"),
                            ItemId = new Guid("a3d5a304-04c2-4b38-8b99-c212b04fda1e"),
                            OrderId = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32")
                        },
                        new
                        {
                            Id = new Guid("a17dac84-4681-41f5-ac7d-0327c8f44832"),
                            ComboId = new Guid("c0f13c93-71ce-4655-92c5-63a8b31c02cd"),
                            ItemId = new Guid("3ebbafe8-8c98-4b8d-b007-65ae39536441"),
                            OrderId = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45cb03cd-b0f3-4b41-8aff-b3c3e86db932"),
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("dd91263f-c9e6-4bef-9388-57451511456a"),
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("6fe9d637-55d0-4f4e-a893-3eab62cc3634"),
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("84af3e9f-e390-4b50-b63c-b11bd7133656"),
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("9a058b47-8dc8-4573-80fe-3b5aee9aaaf9"),
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("4f8f7ef3-6586-4c86-b4f0-e166cedc5031"),
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32"),
                            CustomerId = new Guid("3d564ad5-7ecf-4a86-b038-07e5cec42db0"),
                            EmployeeId = new Guid("9d864aa6-f64e-485a-817a-ff4de9c2f395"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("45ff73bd-9145-4305-9d77-1dbcd9af6be2")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ebbafe8-8c98-4b8d-b007-65ae39536441"),
                            DrinkId = new Guid("6fe9d637-55d0-4f4e-a893-3eab62cc3634"),
                            OrderId = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32"),
                            Quantity = 1,
                            SizeId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3d5a304-04c2-4b38-8b99-c212b04fda1e"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("c803349b-6bc9-43b4-963c-56a5295a5f32"),
                            Quantity = 1,
                            SideId = new Guid("366f74e8-6507-48c5-94ae-c0ee2449d66f"),
                            SizeId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ff73bd-9145-4305-9d77-1dbcd9af6be2"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("9e6d2365-2ea5-4f96-98cb-be8d82058154"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("ecbfaa90-845a-4b9a-b486-7c1c19d3de8f"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("366f74e8-6507-48c5-94ae-c0ee2449d66f"),
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("4e5a2096-ee14-4a74-a4d6-f9df0698c336"),
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("c9837050-72f7-4ae4-9396-5a8894cd7539"),
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("a5dfbb9d-5171-41a5-8b1c-d1b95fb0eb98"),
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("1ffc83fe-201e-40a0-8399-64c18a1c914e"),
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e968e34-174b-406d-9ac4-1abee932ae0a"),
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("b830c0f1-6ad2-493f-a01d-968ea6b56bcf"),
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("df6c8a94-78f0-435b-a5f5-380c13ef6c28"),
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("05b9ebc6-06c0-4d9b-9dc2-f72c2f19fa8f"),
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("d5bad07c-32bd-4ae1-bc0f-5912705fcfd3"),
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("d81d3bf7-6eef-4ee7-beda-870438505893"),
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("2928acdc-61c3-4f5a-8a90-df82e463fca8"),
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("de21ce8f-3a35-4b70-90ad-3fa652f34b04"),
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("2ba4b445-4a4d-4bc6-aa6b-320c4170cb26"),
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("6785e0ff-396c-4b9a-bae5-19bef5e47e88"),
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9b05717-e64a-4a36-8628-11e6580edb03"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("c2e165a1-d7f5-4e3c-971e-2b0f49c1c6cc"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "3e8e50ad-4770-4767-bb9a-189d3f93d687",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("9d864aa6-f64e-485a-817a-ff4de9c2f395"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "62761d6f-3fd9-4011-84fc-263420bd78f4",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("d849d94e-9b67-4fa6-b0de-6edab966fb96"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "ece95ccb-0fa5-48d9-a4dd-f029b2b9ac6f",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("3d564ad5-7ecf-4a86-b038-07e5cec42db0"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "6c485b91-7cd9-4d8d-8a42-a1427e7c5f4b",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "6193b0cd-fca5-4cb8-aeb9-59dc958a0902",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4134fba2-7c1c-40e7-82ba-233f4ec9d767",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJlyoNnl19Zm3Xhx0LXeSMQeyqfVbg8YTbKW2/k/aZq2aLcvQ7sFXZICM2LFNSs46w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae987f1c-b1ce-442e-9132-45a24a60f308",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "3e8e50ad-4770-4767-bb9a-189d3f93d687",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2aff8d68-f0fa-4e72-8e20-20222ff6bc38",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBT4t5+yePW+WUSV/T2QwTvFKH+wDHHq9wdKLd6lERRUHmY/xu5O6LmnNEKPS6l7KA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36278c69-68ee-4e5d-9272-023c696d3381",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "ece95ccb-0fa5-48d9-a4dd-f029b2b9ac6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7014b445-5b54-4063-a89f-1abe197d0ed6",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGFXVBu/NWiTrQBaeN3NFDjR9n9/Q5fOpbRtGRpc/zf81NN7wYF3TOCFVeGzC3W5Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c0d18d8-57d7-4e1f-bdc9-9157c3c72645",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "62761d6f-3fd9-4011-84fc-263420bd78f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dccd460-7c97-4d57-8bd2-225c4de7d12f",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDP0SgjI3Oz11LDqPNqQURorLWkynnem7x9fh8EOgYqAFsgwtKWq80Lxia+N+p7PSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd790184-e813-4c9b-9e02-9a1ccedabe4e",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "6c485b91-7cd9-4d8d-8a42-a1427e7c5f4b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e7a71ee-e4b3-4a70-8ada-1b52cf9820a8",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAED2POCrr94JSxkAx0SqyxSmyFD4WWhqGcJN6s2pLvozGNkxsZ1CAu7V6hYq/KK0dig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "983315d5-bd22-45d7-9beb-d73a058c6e18",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "ece95ccb-0fa5-48d9-a4dd-f029b2b9ac6f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "3e8e50ad-4770-4767-bb9a-189d3f93d687",
                            RoleId = "6193b0cd-fca5-4cb8-aeb9-59dc958a0902"
                        },
                        new
                        {
                            UserId = "62761d6f-3fd9-4011-84fc-263420bd78f4",
                            RoleId = "6193b0cd-fca5-4cb8-aeb9-59dc958a0902"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
