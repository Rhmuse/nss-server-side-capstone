// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231027164714_addisdeletedtosize")]
    partial class addisdeletedtosize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            IsDeleted = false,
                            OrderId = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            IsDeleted = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            IsDeleted = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9b59149-230d-4d82-a8d9-8fd037b5b1a1"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("7f1e9e24-4565-4a30-96ae-7fba80bf8f53")
                        },
                        new
                        {
                            Id = new Guid("b3994ed3-4df2-4575-8228-9ddea87b011d"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("cd45b699-5373-4c42-ae64-e6c1b83cc4d1")
                        },
                        new
                        {
                            Id = new Guid("d7b99187-f031-4092-b969-ceefb34a0a75"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("ac3917df-f853-4ae8-bcf8-d7df93a09e1c")
                        },
                        new
                        {
                            Id = new Guid("63580421-c6cf-41a6-a80f-e73d2de72c08"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("7e6f7488-d850-481d-8524-c3fdf3ef2855")
                        },
                        new
                        {
                            Id = new Guid("defd21d4-c853-44f1-a84f-a46cfa1c1c4f"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("010072b6-2c6b-4e83-b8b8-1b4379c34551")
                        },
                        new
                        {
                            Id = new Guid("13cda622-7e27-4b3f-8792-fd0ae9763ca4"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("15000563-d4e1-4183-a5ad-8a14018683b1")
                        },
                        new
                        {
                            Id = new Guid("78902908-ce66-4bc3-b6f8-ea594252048b"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("15000563-d4e1-4183-a5ad-8a14018683b1")
                        },
                        new
                        {
                            Id = new Guid("aff6b61b-6029-49a2-83f0-e7dee2e3ca9e"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("890bfcff-8428-4253-a307-9d433f6b202f")
                        },
                        new
                        {
                            Id = new Guid("6de0ea87-86c5-47a5-a0eb-4e0992ccc148"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("22c4ce22-ea43-435e-81d5-71bf033a4e9c")
                        },
                        new
                        {
                            Id = new Guid("b1de3920-9ce7-42a2-8ff0-4fac23626bf6"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Extra = false,
                            ToppingId = new Guid("0469ced1-b1a3-40c7-92a1-f9bc81795aa3")
                        },
                        new
                        {
                            Id = new Guid("1b19f120-23b9-4240-8f31-9c8be9320294"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("7f1e9e24-4565-4a30-96ae-7fba80bf8f53")
                        },
                        new
                        {
                            Id = new Guid("e3c7ea6a-fdfd-4bc4-800f-3a5fa66eed4f"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("cd45b699-5373-4c42-ae64-e6c1b83cc4d1")
                        },
                        new
                        {
                            Id = new Guid("b760d8bb-4b18-43d2-8c28-cd3961024089"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("ac3917df-f853-4ae8-bcf8-d7df93a09e1c")
                        },
                        new
                        {
                            Id = new Guid("89401aab-0dd2-49e9-adee-6b674651d2d9"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("7e6f7488-d850-481d-8524-c3fdf3ef2855")
                        },
                        new
                        {
                            Id = new Guid("9399f89f-9123-49e0-a075-6cddaf5386c3"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("010072b6-2c6b-4e83-b8b8-1b4379c34551")
                        },
                        new
                        {
                            Id = new Guid("b4079e65-e686-4e90-945b-c65feac63cfd"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("15000563-d4e1-4183-a5ad-8a14018683b1")
                        },
                        new
                        {
                            Id = new Guid("8d9bb707-fa79-4791-ae28-fda6cca6c3a3"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("890bfcff-8428-4253-a307-9d433f6b202f")
                        },
                        new
                        {
                            Id = new Guid("901b8537-73fa-4294-bbc6-cb352c8aec61"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("22c4ce22-ea43-435e-81d5-71bf033a4e9c")
                        },
                        new
                        {
                            Id = new Guid("13e0aa44-f3d4-441c-be78-d1d9cfc8ad03"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Extra = false,
                            ToppingId = new Guid("0469ced1-b1a3-40c7-92a1-f9bc81795aa3")
                        },
                        new
                        {
                            Id = new Guid("d13c27a8-41a0-48c3-ab7e-6e8bed4f9579"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("7f1e9e24-4565-4a30-96ae-7fba80bf8f53")
                        },
                        new
                        {
                            Id = new Guid("f981157e-04f7-4f30-9e50-41227f127cb3"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("cd45b699-5373-4c42-ae64-e6c1b83cc4d1")
                        },
                        new
                        {
                            Id = new Guid("8aaa89ca-e59d-46d3-917d-f3b4e19928ad"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("ac3917df-f853-4ae8-bcf8-d7df93a09e1c")
                        },
                        new
                        {
                            Id = new Guid("f44b808e-8028-414b-a163-9f9ef21dd81c"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("7e6f7488-d850-481d-8524-c3fdf3ef2855")
                        },
                        new
                        {
                            Id = new Guid("4765b052-e03b-4f6b-b9a1-31d926c02070"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("010072b6-2c6b-4e83-b8b8-1b4379c34551")
                        },
                        new
                        {
                            Id = new Guid("32e4a955-b4f8-497d-a6f9-71e4ead9c70c"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("15000563-d4e1-4183-a5ad-8a14018683b1")
                        },
                        new
                        {
                            Id = new Guid("ef9afe83-7f74-4e73-8d71-f49f7b722574"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("15000563-d4e1-4183-a5ad-8a14018683b1")
                        },
                        new
                        {
                            Id = new Guid("47b59770-ea72-4c34-a8f4-8fc549db3bb4"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("890bfcff-8428-4253-a307-9d433f6b202f")
                        },
                        new
                        {
                            Id = new Guid("c180bae4-c384-4bde-8819-3ece9418c4ac"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("22c4ce22-ea43-435e-81d5-71bf033a4e9c")
                        },
                        new
                        {
                            Id = new Guid("fd0b726d-d2fd-42b0-bf49-428bc3cc72a8"),
                            BurgerId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            Extra = false,
                            ToppingId = new Guid("0469ced1-b1a3-40c7-92a1-f9bc81795aa3")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("917f007b-3fc8-498c-ac8a-f013b1bc93a1"),
                            BurgerId = new Guid("db4d0d38-a648-47c9-bdd9-e66b3ecb3283"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("aec7855f-bc7a-461b-ae62-7235792fd5df"),
                            BurgerId = new Guid("9f2cd299-1ade-4721-b9e9-473c96f60cf6"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c83f89b5-8a27-4b64-aa31-2cff91c34c6d"),
                            ComboId = new Guid("aec7855f-bc7a-461b-ae62-7235792fd5df"),
                            ItemId = new Guid("8f3e037e-0189-4e8e-b99b-f6bafc926695"),
                            OrderId = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68")
                        },
                        new
                        {
                            Id = new Guid("704925ba-7ca8-451b-b136-f0e6a8416f29"),
                            ComboId = new Guid("aec7855f-bc7a-461b-ae62-7235792fd5df"),
                            ItemId = new Guid("57b776c1-2632-43f2-b7a8-7a5b648e8280"),
                            OrderId = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68")
                        },
                        new
                        {
                            Id = new Guid("f226ada8-ccea-4a33-914f-56846001dfce"),
                            ComboId = new Guid("aec7855f-bc7a-461b-ae62-7235792fd5df"),
                            ItemId = new Guid("072523af-da58-481b-a88a-3f5afedac225"),
                            OrderId = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("649871b1-02ba-4f14-9ad9-4a053f81231b"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("c09f722e-b8de-4365-aceb-8674d4213335"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("249790a4-86fa-47a7-837c-ceedda462b5e"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("20cb9dae-2997-40f3-895c-b667f6999ecc"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("48338b1a-2cfc-43c8-8556-9047ec8f0518"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("9fb2e1b1-0589-4c23-bb4f-c20c83327e00"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68"),
                            CustomerId = new Guid("57d232a8-baa2-4f92-b26f-40b1409243d1"),
                            EmployeeId = new Guid("97cde3a3-379a-498a-b7d8-a7fa645d2d80"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("f859731c-a421-493e-bc41-e7f16fbcc530")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("072523af-da58-481b-a88a-3f5afedac225"),
                            DrinkId = new Guid("249790a4-86fa-47a7-837c-ceedda462b5e"),
                            OrderId = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68"),
                            Quantity = 1,
                            SizeId = new Guid("3baba7e3-f4ca-42bf-9092-929e013bd15f")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57b776c1-2632-43f2-b7a8-7a5b648e8280"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("993bed38-91bf-470e-99b0-f0f8969e9d68"),
                            Quantity = 1,
                            SideId = new Guid("030b3007-1c19-4d0c-bb3e-0e08e33431e1"),
                            SizeId = new Guid("0b1ee2f6-3356-4a98-aec5-158c9f9ab957")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f859731c-a421-493e-bc41-e7f16fbcc530"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("7fe01976-7118-4cb2-97d7-66f9313d9193"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("51e19d95-e4b8-4c12-91f8-fad9257575c0"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("030b3007-1c19-4d0c-bb3e-0e08e33431e1"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("6fd6d9e0-39b6-48ac-aae4-887e3c82eeb8"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("497f13a2-0fd2-45ef-8b6a-621da20e0069"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("9d17cc02-bf0e-4f9e-be35-2cffdade4b9a"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("a0ae8c50-4df5-4eb4-9816-898250f89044"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d56abcd-29ad-4112-a0a6-b396ddb66c44"),
                            IsDeleted = false,
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("3baba7e3-f4ca-42bf-9092-929e013bd15f"),
                            IsDeleted = false,
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("0b1ee2f6-3356-4a98-aec5-158c9f9ab957"),
                            IsDeleted = false,
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd45b699-5373-4c42-ae64-e6c1b83cc4d1"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("ac3917df-f853-4ae8-bcf8-d7df93a09e1c"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("7e6f7488-d850-481d-8524-c3fdf3ef2855"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("010072b6-2c6b-4e83-b8b8-1b4379c34551"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("22c4ce22-ea43-435e-81d5-71bf033a4e9c"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("890bfcff-8428-4253-a307-9d433f6b202f"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("7f1e9e24-4565-4a30-96ae-7fba80bf8f53"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("15000563-d4e1-4183-a5ad-8a14018683b1"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("0469ced1-b1a3-40c7-92a1-f9bc81795aa3"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("ab7df5ce-1e85-46eb-8073-1ab798da0711"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dad7804-a5a6-4c8b-b339-733eb5e2247d"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("330a8858-e7e8-4046-97d6-480e7e342368"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "8d500f4d-149e-4434-9240-2a03d3c88ab7",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("97cde3a3-379a-498a-b7d8-a7fa645d2d80"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "5ca9645c-e3bd-41f7-af8e-e09b5d0a2aa3",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("82ff7723-205a-4ea1-8ab4-c63bb2320c20"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "8d6ffe92-e1eb-466a-a207-ba96e3765c8f",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("57d232a8-baa2-4f92-b26f-40b1409243d1"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "efc130ee-1790-478a-b5c8-af10185ccaac",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "a6009515-aff8-4ba2-9ea8-550b697a3a98",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "283b2e5a-b3bf-490f-bf89-825fd8f2e535",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIPkRsgv/txeOsEjcOQRVU3psjyh8jeZeLnJcArYA4iFJO06H0bQAeTYWbX9TZykBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7eb25115-e975-4a1b-b8c4-56803d3537d6",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "8d500f4d-149e-4434-9240-2a03d3c88ab7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd6d671a-8cf2-46bc-8524-034779572dfd",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMkH3r6/Gb+X307OLhiN9arzf9udocDN6fWt0q1snwlgyDcQpgX/7s5BbFqNCwLd/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7432b3e6-65d8-4632-9989-31ca2a6eccbc",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "8d6ffe92-e1eb-466a-a207-ba96e3765c8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56d14d2f-bf17-4528-bd3e-94b60018941c",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBq6iCzBHA8mKdP0wD1vJCoxe1qy9WygGHWE1slcpWAaMr6K0wfD+y+V70Epl1XkTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07515c2c-ac11-4722-8b3b-0e8053cac0dd",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "5ca9645c-e3bd-41f7-af8e-e09b5d0a2aa3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68522992-003a-4c15-9e5f-f2d943d956cb",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKV/Da381wUTl8GmsmzxlE4l3d+eDLlb8C5Ar/3UKo0n+AxGEibpxyw/TB/e28AGew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc76a384-9216-46a0-b4ab-6264b838f2e5",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "efc130ee-1790-478a-b5c8-af10185ccaac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43c2bf34-9fdb-4e1e-b5cd-40ddf813a346",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH0qUvZX8VGIEmz8etGfs77zkGq+dA+LzjZRQKkYUW+/OivPfHVrF0+tJMzCciMuBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f70fc38-e8e4-48f4-aff2-987196b6045b",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "8d6ffe92-e1eb-466a-a207-ba96e3765c8f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "8d500f4d-149e-4434-9240-2a03d3c88ab7",
                            RoleId = "a6009515-aff8-4ba2-9ea8-550b697a3a98"
                        },
                        new
                        {
                            UserId = "5ca9645c-e3bd-41f7-af8e-e09b5d0a2aa3",
                            RoleId = "a6009515-aff8-4ba2-9ea8-550b697a3a98"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
