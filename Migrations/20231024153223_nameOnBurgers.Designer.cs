// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    [Migration("20231024153223_nameOnBurgers")]
    partial class nameOnBurgers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            OrderId = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            Name = "double krabby patty",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aee88ad4-e559-44e5-82a0-23188b224dfa"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("1507ca55-71b2-47d2-bf42-877b02c71718")
                        },
                        new
                        {
                            Id = new Guid("62b246f4-bd0b-4a0a-bbe1-3e673d7683d1"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("6feaa3bc-0cf8-4ac9-8238-7192ff1af5b3")
                        },
                        new
                        {
                            Id = new Guid("abb70bbd-43c6-4776-8248-d453521f2b3d"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("d8036fd0-1e30-4e49-8ec3-328b6a1b5c02")
                        },
                        new
                        {
                            Id = new Guid("10376ad2-a002-4efd-8b85-81d996cc98df"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("a9b8334a-125b-4cb7-bac8-b325514a8223")
                        },
                        new
                        {
                            Id = new Guid("907499c3-a68a-45a6-85b9-9fb16b3e4f75"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("60725929-ae42-4838-8c7b-1976f79730f3")
                        },
                        new
                        {
                            Id = new Guid("25e21efc-8351-4583-a38c-b2b645615804"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("919dfc51-1f00-4916-bd96-7c95defd8f19")
                        },
                        new
                        {
                            Id = new Guid("53cd1d84-e8e9-421a-ab13-3339ad34834d"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("919dfc51-1f00-4916-bd96-7c95defd8f19")
                        },
                        new
                        {
                            Id = new Guid("86540e5d-0415-413e-9568-f1058c452c0e"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("c28c19ab-eea1-45b7-b14d-a85adc37c6d2")
                        },
                        new
                        {
                            Id = new Guid("50efa2bc-1d28-430b-b65a-80f3505c1afa"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("92ea16f4-7a90-4fd8-805a-a606c093063e")
                        },
                        new
                        {
                            Id = new Guid("f58d9e70-83b3-4f16-a1f6-1086492e37f7"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            ToppingId = new Guid("cc4538a2-5b30-4421-a08d-a3e460fe6dd2")
                        },
                        new
                        {
                            Id = new Guid("1917d909-1520-4254-8038-22e802afd312"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("1507ca55-71b2-47d2-bf42-877b02c71718")
                        },
                        new
                        {
                            Id = new Guid("918a5f5c-2f15-4236-84c6-9383153dad56"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("6feaa3bc-0cf8-4ac9-8238-7192ff1af5b3")
                        },
                        new
                        {
                            Id = new Guid("ccd6255b-fe49-4bd4-86f9-2b33b03c820a"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("d8036fd0-1e30-4e49-8ec3-328b6a1b5c02")
                        },
                        new
                        {
                            Id = new Guid("d6c86d88-b232-429b-8206-6ee969156b20"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("a9b8334a-125b-4cb7-bac8-b325514a8223")
                        },
                        new
                        {
                            Id = new Guid("83542567-c618-4812-b9a9-c57904e97045"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("60725929-ae42-4838-8c7b-1976f79730f3")
                        },
                        new
                        {
                            Id = new Guid("f45b3877-b8b0-4cbe-a7ab-54515862407c"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("919dfc51-1f00-4916-bd96-7c95defd8f19")
                        },
                        new
                        {
                            Id = new Guid("2407de12-5255-4c9b-a341-e2401b0584f4"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("c28c19ab-eea1-45b7-b14d-a85adc37c6d2")
                        },
                        new
                        {
                            Id = new Guid("4f123d89-a7e4-4276-9e97-9b856b98dc19"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("92ea16f4-7a90-4fd8-805a-a606c093063e")
                        },
                        new
                        {
                            Id = new Guid("53e0df93-bed2-4d26-8f84-ea43feba3f46"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            ToppingId = new Guid("cc4538a2-5b30-4421-a08d-a3e460fe6dd2")
                        },
                        new
                        {
                            Id = new Guid("15cc10b4-1980-4a61-953a-d859b022428f"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("1507ca55-71b2-47d2-bf42-877b02c71718")
                        },
                        new
                        {
                            Id = new Guid("a363fddc-4f80-4858-91cc-5d92a01fea7e"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("6feaa3bc-0cf8-4ac9-8238-7192ff1af5b3")
                        },
                        new
                        {
                            Id = new Guid("7c0c7ce4-e178-4803-86d3-487db8d08e2b"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("d8036fd0-1e30-4e49-8ec3-328b6a1b5c02")
                        },
                        new
                        {
                            Id = new Guid("0f718f4b-d7b9-4423-83df-2984a5b56d12"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("a9b8334a-125b-4cb7-bac8-b325514a8223")
                        },
                        new
                        {
                            Id = new Guid("870c174e-f82a-4ca5-9d24-99e4f73c8c8d"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("60725929-ae42-4838-8c7b-1976f79730f3")
                        },
                        new
                        {
                            Id = new Guid("26414236-cd46-4cfa-8a35-5775426abdba"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("919dfc51-1f00-4916-bd96-7c95defd8f19")
                        },
                        new
                        {
                            Id = new Guid("e130519e-4022-432f-a4ec-d04763ac9d4c"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("919dfc51-1f00-4916-bd96-7c95defd8f19")
                        },
                        new
                        {
                            Id = new Guid("55fe7e6a-c202-4b84-b5fe-b3a0afb09423"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("c28c19ab-eea1-45b7-b14d-a85adc37c6d2")
                        },
                        new
                        {
                            Id = new Guid("19b9950e-ec42-46df-b85d-f9b256aac0cd"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("92ea16f4-7a90-4fd8-805a-a606c093063e")
                        },
                        new
                        {
                            Id = new Guid("02e33225-72c0-4967-90ad-ec4f79ba3d63"),
                            BurgerId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            ToppingId = new Guid("cc4538a2-5b30-4421-a08d-a3e460fe6dd2")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("008678d3-329a-41ed-8163-7c8437ee8939"),
                            BurgerId = new Guid("76b45ca0-2d30-4d73-9ff9-86b16c6c0f6b"),
                            Discount = -1f,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("48945177-66b3-4da7-9226-2071ad78594b"),
                            BurgerId = new Guid("d058ac14-b29a-4a72-8ce4-116dc22c400a"),
                            Discount = -1.25f,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b961bbf0-403f-49f2-aaf3-98ea533289d9"),
                            ComboId = new Guid("48945177-66b3-4da7-9226-2071ad78594b"),
                            ItemId = new Guid("b08890cb-025d-48d6-9aec-1fad1e5c472f"),
                            OrderId = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303")
                        },
                        new
                        {
                            Id = new Guid("1c108a9e-9b99-4fc0-9d12-2ad2ca395799"),
                            ComboId = new Guid("48945177-66b3-4da7-9226-2071ad78594b"),
                            ItemId = new Guid("178a0e8b-bc78-4daa-9976-8935353340b9"),
                            OrderId = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303")
                        },
                        new
                        {
                            Id = new Guid("9d97c034-61df-49ad-84fc-246f7e78890a"),
                            ComboId = new Guid("48945177-66b3-4da7-9226-2071ad78594b"),
                            ItemId = new Guid("40a5da61-4f56-4081-8bb7-41976b0a701d"),
                            OrderId = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("116c2397-0358-440b-9c87-76090a8eecc1"),
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("44b9e5c2-8ff9-40fb-ac2f-9165f8795035"),
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("5c1dd2e5-156d-4196-9bc6-57e7c2d8e0b3"),
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("cf7f64ad-79ea-4981-b46c-a29a71e8251f"),
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("f04c3eb3-f135-4316-8d8f-2989c401d3c7"),
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("eb5317b2-636a-44dc-89d4-591e25d772af"),
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303"),
                            CustomerId = new Guid("2a5c48d7-9ce7-4747-80c6-bcdfebc62d82"),
                            EmployeeId = new Guid("1695d860-3926-452f-9c5b-42518b143fa5"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("99aea153-e778-4e43-9210-1125857287c9")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40a5da61-4f56-4081-8bb7-41976b0a701d"),
                            DrinkId = new Guid("5c1dd2e5-156d-4196-9bc6-57e7c2d8e0b3"),
                            OrderId = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303"),
                            Quantity = 1,
                            SizeId = new Guid("52e7feb2-ce4b-41ff-954b-bf1530547817")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("178a0e8b-bc78-4daa-9976-8935353340b9"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("9c850bab-3dd6-4415-ab77-d2b880885303"),
                            Quantity = 1,
                            SideId = new Guid("1e1642f0-346b-4f30-b886-a93a71fc7efd"),
                            SizeId = new Guid("919e5331-40e7-4db7-b9a6-7f7bfbda2188")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99aea153-e778-4e43-9210-1125857287c9"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("fac82dfc-c5a1-4ae1-8b3c-b1e7d557dc5c"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("3e6743ad-c9aa-413f-8416-24047564323c"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e1642f0-346b-4f30-b886-a93a71fc7efd"),
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("49da624b-41c4-4f0c-8c4e-9b32f87c3d24"),
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("77aec8fc-d0ad-49aa-932f-2e04f8a5b4f5"),
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("e84bfef9-d6a7-4c33-b8ac-927eb3e5a44b"),
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("e0507091-6a54-440b-bd24-adf2e23f0e8a"),
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85359301-c9f5-4907-92d5-de759d7f91c7"),
                            Name = "small",
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("52e7feb2-ce4b-41ff-954b-bf1530547817"),
                            Name = "medium",
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("919e5331-40e7-4db7-b9a6-7f7bfbda2188"),
                            Name = "large",
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6feaa3bc-0cf8-4ac9-8238-7192ff1af5b3"),
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("d8036fd0-1e30-4e49-8ec3-328b6a1b5c02"),
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("a9b8334a-125b-4cb7-bac8-b325514a8223"),
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("60725929-ae42-4838-8c7b-1976f79730f3"),
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("92ea16f4-7a90-4fd8-805a-a606c093063e"),
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("c28c19ab-eea1-45b7-b14d-a85adc37c6d2"),
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("1507ca55-71b2-47d2-bf42-877b02c71718"),
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("919dfc51-1f00-4916-bd96-7c95defd8f19"),
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("cc4538a2-5b30-4421-a08d-a3e460fe6dd2"),
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("568cb4ec-53a4-4ac2-ae18-4d5b48c52289"),
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2335abc1-2914-4355-b32b-6f5dd81ccc8f"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("0e9ede9a-14aa-4801-80e5-62fef7a0f63c"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "9a4eb093-6ebb-4f1d-bdfe-3f7b179a786c",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("1695d860-3926-452f-9c5b-42518b143fa5"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "02281be4-0d95-4711-99a8-0c64b640799b",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("007e837e-1dfb-4d59-b0c9-c325f0d8d32d"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "099cbd77-4110-43f3-b771-3bd2dd976d5b",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("2a5c48d7-9ce7-4747-80c6-bcdfebc62d82"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "c32c4039-3085-44f9-b190-eabc0db206b7",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "dc3b483f-72fc-4bee-a519-387151ccda89",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3bd03d8-0929-40ef-8122-d405c4563835",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJIM1Hgi5upDYkaXc4/z+AD07VZY26jCGLZMa0T3xtNaQAlSkhBMKN7H/HR5dhQB+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "401307f8-5813-4a7c-a0eb-dcfd786abff6",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "9a4eb093-6ebb-4f1d-bdfe-3f7b179a786c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e550af3d-2a05-42c8-b4e6-91b3cf7caa14",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJJMVfH0B+FTz53kA7L1nxthZhw8C7/XR5KF1UDnDlzg/dpqZh4O5XGH7XL0EvcVBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "146c831e-34f4-402a-aad5-618f1537892f",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "099cbd77-4110-43f3-b771-3bd2dd976d5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6822f2c-aa86-4945-9430-945c6d1f2561",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECvuTYSkBST7u3yx6c/r8o/zPQPjklrzwGK1dKigr8GRc77Fg7GKwdQvbc76riR6mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b48d669-5419-4d8d-a876-9f3f0ab9fc0f",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "02281be4-0d95-4711-99a8-0c64b640799b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "452c8282-9173-4574-9dc6-5e2bae126137",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEI7rkYAq2A/pI522xDCj7p0/OejBMYPE6c6m9AmdmBeq9Zp0KlBpkExcdcUBIHbKjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0443c1c0-2dfd-4022-aae8-9e08fcbbab37",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "c32c4039-3085-44f9-b190-eabc0db206b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "696bd78c-bfcc-48e0-88a9-0b7a77338401",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM/loJoQPhZh4HBiyJX/DzOwGtgeyVBlpa0cpYvHjnvfme1bSzzLepGKXsPa0VZ9pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2be63c57-cd7b-4b67-925a-31fe39a79a41",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "099cbd77-4110-43f3-b771-3bd2dd976d5b",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "9a4eb093-6ebb-4f1d-bdfe-3f7b179a786c",
                            RoleId = "dc3b483f-72fc-4bee-a519-387151ccda89"
                        },
                        new
                        {
                            UserId = "02281be4-0d95-4711-99a8-0c64b640799b",
                            RoleId = "dc3b483f-72fc-4bee-a519-387151ccda89"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
