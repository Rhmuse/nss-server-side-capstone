// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    partial class KrustyKrabDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            OrderId = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("448f2405-0f8c-405a-ba5e-9aa30824ca7c"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("fd1efc42-2c14-477b-908e-89363a258b3e")
                        },
                        new
                        {
                            Id = new Guid("fc29c64a-5183-44c3-9113-34ad0e8f3e6d"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("209475f0-a4fa-4925-b7e3-a7aa5e6e474c")
                        },
                        new
                        {
                            Id = new Guid("e3ffb38d-5293-44b6-ba99-4270c18dc124"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("99349758-1a84-42de-a927-e549195f7975")
                        },
                        new
                        {
                            Id = new Guid("4d916587-e1d7-4498-b5eb-a1fa0d904144"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("782452eb-eede-4b4a-9053-4c79328adb0f")
                        },
                        new
                        {
                            Id = new Guid("fb25ba82-fd8e-49c9-b8f1-9fee32ecc557"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("89618a45-9bb3-45d0-b940-6ebcfd5cba3f")
                        },
                        new
                        {
                            Id = new Guid("a68a7b47-8d87-43a1-887e-afb4c40e5820"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("5aeb25c2-2eb5-4eeb-94c4-3802a800b18c")
                        },
                        new
                        {
                            Id = new Guid("97bc626d-1961-4b86-ab24-0c4097c20bfd"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("5aeb25c2-2eb5-4eeb-94c4-3802a800b18c")
                        },
                        new
                        {
                            Id = new Guid("1a04876d-95be-47aa-9b28-80412a2c8f84"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("f741ce79-a158-40ac-bedc-d6473f441e46")
                        },
                        new
                        {
                            Id = new Guid("caedbc6f-d90f-4719-888e-1ab441d22817"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("0c04937e-8885-480a-beed-2cf946c70819")
                        },
                        new
                        {
                            Id = new Guid("aa1f930c-e033-49c3-92de-f9a98a6c0870"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            ToppingId = new Guid("9673aade-f07b-478b-894b-dc4d2282c847")
                        },
                        new
                        {
                            Id = new Guid("d0813a5c-d171-46ef-bccd-bd99d9d65eff"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("fd1efc42-2c14-477b-908e-89363a258b3e")
                        },
                        new
                        {
                            Id = new Guid("6f5bbade-fbd5-40df-a552-cb0e242457f6"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("209475f0-a4fa-4925-b7e3-a7aa5e6e474c")
                        },
                        new
                        {
                            Id = new Guid("1098a99b-327b-4b4e-833a-9e60a9aef46a"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("99349758-1a84-42de-a927-e549195f7975")
                        },
                        new
                        {
                            Id = new Guid("009e534e-8450-4d11-95f1-76d1a3d757ef"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("782452eb-eede-4b4a-9053-4c79328adb0f")
                        },
                        new
                        {
                            Id = new Guid("46b3770a-8d17-46b4-8d51-680ca2f521f3"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("89618a45-9bb3-45d0-b940-6ebcfd5cba3f")
                        },
                        new
                        {
                            Id = new Guid("f8936f22-e6a5-41e5-bfa2-054465051c25"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("5aeb25c2-2eb5-4eeb-94c4-3802a800b18c")
                        },
                        new
                        {
                            Id = new Guid("108146e4-abf6-45dd-9362-68ff97afd6e1"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("f741ce79-a158-40ac-bedc-d6473f441e46")
                        },
                        new
                        {
                            Id = new Guid("12f0eff8-d966-49e0-8c51-7736c2990b59"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("0c04937e-8885-480a-beed-2cf946c70819")
                        },
                        new
                        {
                            Id = new Guid("4769774a-f91d-4720-a2c3-703481187342"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            ToppingId = new Guid("9673aade-f07b-478b-894b-dc4d2282c847")
                        },
                        new
                        {
                            Id = new Guid("4823d565-65b8-4688-950d-2b76418b1d1f"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("fd1efc42-2c14-477b-908e-89363a258b3e")
                        },
                        new
                        {
                            Id = new Guid("a00ee486-08a8-4620-b920-f4d27002a6ee"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("209475f0-a4fa-4925-b7e3-a7aa5e6e474c")
                        },
                        new
                        {
                            Id = new Guid("07b6aea9-8b76-4aed-b546-160f907bd997"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("99349758-1a84-42de-a927-e549195f7975")
                        },
                        new
                        {
                            Id = new Guid("60ec8ef2-a519-41ad-90ee-a2677c14fbd8"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("782452eb-eede-4b4a-9053-4c79328adb0f")
                        },
                        new
                        {
                            Id = new Guid("c9f48fb5-7d25-4de1-8e19-9af707f5268f"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("89618a45-9bb3-45d0-b940-6ebcfd5cba3f")
                        },
                        new
                        {
                            Id = new Guid("9c286875-e6be-48e8-a89c-6e6908a07f72"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("5aeb25c2-2eb5-4eeb-94c4-3802a800b18c")
                        },
                        new
                        {
                            Id = new Guid("47114504-cc9f-4665-a2b9-5d86dfab7663"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("5aeb25c2-2eb5-4eeb-94c4-3802a800b18c")
                        },
                        new
                        {
                            Id = new Guid("fbc70c8e-2e49-4073-b45f-5bf70cafe7c2"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("f741ce79-a158-40ac-bedc-d6473f441e46")
                        },
                        new
                        {
                            Id = new Guid("74c914ab-66df-41d6-8a64-3c352fabe9ba"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("0c04937e-8885-480a-beed-2cf946c70819")
                        },
                        new
                        {
                            Id = new Guid("21025b4f-d628-40d3-bac2-182245900815"),
                            BurgerId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            ToppingId = new Guid("9673aade-f07b-478b-894b-dc4d2282c847")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("243fb016-95f6-4d5c-8492-763eaf2342f4"),
                            BurgerId = new Guid("00d77779-7147-4d9b-91f4-5caae3deb1ef"),
                            Discount = -1f,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("3a912e55-f477-4e70-86a0-62446c8f3538"),
                            BurgerId = new Guid("82b06897-bf66-423b-95ff-5359d66c69f2"),
                            Discount = -1.25f,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.ComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ComboItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9061f82a-bfaa-45ed-b96e-4fd94a605c68"),
                            ComboId = new Guid("3a912e55-f477-4e70-86a0-62446c8f3538"),
                            ItemId = new Guid("3ccaf24b-04b1-440c-8ca5-45396b562ed9"),
                            OrderId = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f")
                        },
                        new
                        {
                            Id = new Guid("381438f3-cba7-4718-b9b1-f0f6b8bb7802"),
                            ComboId = new Guid("3a912e55-f477-4e70-86a0-62446c8f3538"),
                            ItemId = new Guid("c33b0b6b-ae7e-44c6-ae0e-8d13d4dd1fc5"),
                            OrderId = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f")
                        },
                        new
                        {
                            Id = new Guid("36aec262-07ad-4cc3-a793-95e9697ed275"),
                            ComboId = new Guid("3a912e55-f477-4e70-86a0-62446c8f3538"),
                            ItemId = new Guid("e27a7325-0635-4fe3-945c-877ba120b7e4"),
                            OrderId = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b66a844e-b7f0-4561-b4d7-17c9fcbc2f09"),
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("2d0e08b6-443a-471d-990b-3f685cdf8862"),
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("1645954e-43ec-4be6-9aba-1d262f8659df"),
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("d7df5d3f-cf52-4de1-8c0c-ecc7e93b2bd8"),
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("b318597b-a1b8-458d-9989-496e6e7f8db0"),
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("236e5035-cba4-4dff-acd6-2dca83229cf4"),
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f"),
                            CustomerId = new Guid("a6526e02-0dfa-4c08-b5d7-a16cc7c1109d"),
                            EmployeeId = new Guid("ade47e52-8e07-4736-8ab4-0aae2dbaa124"),
                            OrderTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderTypeId = new Guid("43d1a26c-e9b3-497e-8341-cbff145ae482")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e27a7325-0635-4fe3-945c-877ba120b7e4"),
                            DrinkId = new Guid("1645954e-43ec-4be6-9aba-1d262f8659df"),
                            OrderId = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c33b0b6b-ae7e-44c6-ae0e-8d13d4dd1fc5"),
                            ComboItemId = new Guid("00000000-0000-0000-0000-000000000000"),
                            OrderId = new Guid("0513effd-f3c7-42fe-87de-01ae9f685d4f"),
                            Quantity = 1,
                            SideId = new Guid("ec9eafdd-84dc-4f50-8c43-d286477b3792")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43d1a26c-e9b3-497e-8341-cbff145ae482"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("6da31e85-d0ae-4448-9a8c-266456d8d3d9"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("a9aca786-605a-4e8c-8014-b08a427aa6f3"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec9eafdd-84dc-4f50-8c43-d286477b3792"),
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("7589deb4-f186-45ec-aa68-c6562503ed03"),
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("8d1f0413-e42e-4fbc-87ab-e5f6805fc28c"),
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("c851712f-c663-4251-adbd-6820ca937f6c"),
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("1b91e550-4b23-459f-b3bf-263d106a7473"),
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("209475f0-a4fa-4925-b7e3-a7aa5e6e474c"),
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("99349758-1a84-42de-a927-e549195f7975"),
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("782452eb-eede-4b4a-9053-4c79328adb0f"),
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("89618a45-9bb3-45d0-b940-6ebcfd5cba3f"),
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("0c04937e-8885-480a-beed-2cf946c70819"),
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("f741ce79-a158-40ac-bedc-d6473f441e46"),
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("fd1efc42-2c14-477b-908e-89363a258b3e"),
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("5aeb25c2-2eb5-4eeb-94c4-3802a800b18c"),
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("9673aade-f07b-478b-894b-dc4d2282c847"),
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("7fa0bb75-4ee9-417b-93ad-b1947a728652"),
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ceb4bba-c879-42c2-bd30-5f690006c40f"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("f8d5eec0-4e2d-49e9-8bbb-37e11e078efd"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "67ce3d19-85fa-42e2-9379-5b91be295661",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("ade47e52-8e07-4736-8ab4-0aae2dbaa124"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "aaecde13-1dee-4899-860a-07709cc7705c",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("4c688e47-3132-43df-a2cd-473dc689e450"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "1730a8a1-5239-4905-86b5-32a6fa628603",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("a6526e02-0dfa-4c08-b5d7-a16cc7c1109d"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "fc73b74e-b3a6-4f1e-8a07-4faa1e9f580f",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "70498912-9de9-47fc-a5c3-7afd7b4431df",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68ad901e-fc07-46ec-9051-348bc5513e98",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDLFBA23+m7bh+82jG9aKQppT8SYHUn4buaSRXzV/Zgs8CjfC1IGynSOG4kUAt0q2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6056296-2abe-4491-b6f3-05cd2fbd0f87",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "67ce3d19-85fa-42e2-9379-5b91be295661",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d25b037-ee8e-422e-9283-b3952da6925c",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENmomMnps9yQ5wpQ6j0Wl0wmcVp6F0nPE8+ktQ9xI/2JC+RmI8ImfjTA/tEcMBbqVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6ff6415-0213-4be3-9029-545f10e68c40",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "1730a8a1-5239-4905-86b5-32a6fa628603",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1893ace2-8b04-4a26-a0f7-276a9b24b464",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJn7ouarooZQ+YNvGlA1fivKy2omGGv/mZA8SRaZXBGuOiu71NZZpLODfIvtaQDlLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf145d4c-e2cd-4649-be6e-2b2dc9aa1ad1",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "aaecde13-1dee-4899-860a-07709cc7705c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27d4f2a0-fa26-4789-8016-d90c1b24ffe3",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIbI2pLOyXxVEf3X+XNLT8vwGUbUMo6wo/JSdYE8/djw7aZltWSrfr4gSZ+EQc+wEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "766c53d1-2310-4e6b-b775-e652e5cd71e0",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "fc73b74e-b3a6-4f1e-8a07-4faa1e9f580f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49c13167-5668-42f9-86d8-5398d7754296",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKVcwqNMgkce29HCr7AGI1qLcdG152igRPjfSywqPNtdB1H/sH+rX8IlLhfBLCa0gQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "596d32ce-cb27-455f-8e8c-30d6ae4f62cf",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "1730a8a1-5239-4905-86b5-32a6fa628603",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "67ce3d19-85fa-42e2-9379-5b91be295661",
                            RoleId = "70498912-9de9-47fc-a5c3-7afd7b4431df"
                        },
                        new
                        {
                            UserId = "aaecde13-1dee-4899-860a-07709cc7705c",
                            RoleId = "70498912-9de9-47fc-a5c3-7afd7b4431df"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
