// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    partial class KrustyKrabDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            IsDeleted = false,
                            IsInCombo = false,
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("6f02afab-b32d-486c-b2df-163258d95e9d"),
                            IsDeleted = false,
                            IsInCombo = true,
                            OrderComboId = new Guid("bffea8fd-0443-4688-84c6-72b047458059"),
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9106812-a372-4695-813f-eb7764aed5c7"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("6ed7f3f2-a11e-4564-bd0a-5577a83a49a8")
                        },
                        new
                        {
                            Id = new Guid("dbecd615-633b-4552-bb34-4df2f51e284c"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("a605c9b7-baa8-4163-b25f-8de28dc5992c")
                        },
                        new
                        {
                            Id = new Guid("c1cfa02b-bee7-4d82-9fdf-b91a1287fcaf"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("c19344f4-80ff-485b-b006-efbce38de108")
                        },
                        new
                        {
                            Id = new Guid("a2a705a0-2a1d-4d39-afb7-05da6b54f9b5"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("fd0e3766-f26d-4465-a808-b4b262045b9a")
                        },
                        new
                        {
                            Id = new Guid("a2201fc7-b570-4e8e-8ee7-2af54bc6fc6b"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("5270cf4d-0a22-49be-b958-5e1459fa291b")
                        },
                        new
                        {
                            Id = new Guid("249fdd4b-7842-4968-acb7-e4adcb42661a"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9")
                        },
                        new
                        {
                            Id = new Guid("9b0b2b72-e770-4de8-9f99-5a201f0a9b4a"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9")
                        },
                        new
                        {
                            Id = new Guid("8ce87eee-5b0c-4af8-b127-926d3eaf7fe8"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("7f4d5ddb-625b-41d8-96b6-2d7a4fde8082")
                        },
                        new
                        {
                            Id = new Guid("ece77484-6127-4800-bca9-22430cebfd7a"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("0b24f943-112f-4581-9012-66c22ebc78e4")
                        },
                        new
                        {
                            Id = new Guid("6ec9868d-e47b-43ad-b91c-57410a68a50b"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("7072d592-d83e-4370-8231-968557a1a7fa")
                        },
                        new
                        {
                            Id = new Guid("399bd453-638a-4b2e-b42c-dccd9515318b"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Extra = false,
                            ToppingId = new Guid("eb1a74ee-a261-49ec-bd43-3a23ef5fc549")
                        },
                        new
                        {
                            Id = new Guid("305309f9-4e18-4150-95d2-d2d53fddd00e"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("6ed7f3f2-a11e-4564-bd0a-5577a83a49a8")
                        },
                        new
                        {
                            Id = new Guid("10b4ea7d-933f-4efa-a4e5-2d263b1dda1e"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("a605c9b7-baa8-4163-b25f-8de28dc5992c")
                        },
                        new
                        {
                            Id = new Guid("83b612b2-2bb9-483a-8137-1712696e3dba"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("c19344f4-80ff-485b-b006-efbce38de108")
                        },
                        new
                        {
                            Id = new Guid("1bc24ec0-9159-4f62-b233-9afeba8815f4"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("fd0e3766-f26d-4465-a808-b4b262045b9a")
                        },
                        new
                        {
                            Id = new Guid("bcde5458-2eab-44c4-a0c8-b100a0cdbcce"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("5270cf4d-0a22-49be-b958-5e1459fa291b")
                        },
                        new
                        {
                            Id = new Guid("bc7ff02c-3805-4902-b099-18f57aec734d"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9")
                        },
                        new
                        {
                            Id = new Guid("946411a6-58fb-4857-9742-b2edf4f24c61"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("7f4d5ddb-625b-41d8-96b6-2d7a4fde8082")
                        },
                        new
                        {
                            Id = new Guid("52add5aa-82a2-407d-b1f8-1cd5553b2287"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("0b24f943-112f-4581-9012-66c22ebc78e4")
                        },
                        new
                        {
                            Id = new Guid("094c0bc3-0103-4645-9108-345cd3b13edd"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("7072d592-d83e-4370-8231-968557a1a7fa")
                        },
                        new
                        {
                            Id = new Guid("3ae8c5f5-e3ac-4c60-addc-657f6b259bf9"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Extra = false,
                            ToppingId = new Guid("eb1a74ee-a261-49ec-bd43-3a23ef5fc549")
                        },
                        new
                        {
                            Id = new Guid("fc9dfb17-6aec-4e3d-8e68-a7d6d3df5278"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("6ed7f3f2-a11e-4564-bd0a-5577a83a49a8")
                        },
                        new
                        {
                            Id = new Guid("573e35bb-366a-47df-a9ed-997a9396885c"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("a605c9b7-baa8-4163-b25f-8de28dc5992c")
                        },
                        new
                        {
                            Id = new Guid("cda4de1a-ba9a-44f4-8603-233ce2fbd29c"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("c19344f4-80ff-485b-b006-efbce38de108")
                        },
                        new
                        {
                            Id = new Guid("a93f7d40-279b-41c6-9825-541c8baf4e89"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("fd0e3766-f26d-4465-a808-b4b262045b9a")
                        },
                        new
                        {
                            Id = new Guid("2560c2a8-964d-467d-8206-019cdf05aa03"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("5270cf4d-0a22-49be-b958-5e1459fa291b")
                        },
                        new
                        {
                            Id = new Guid("1ee38d6b-569e-4fb6-81fc-121655bbc0bf"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9")
                        },
                        new
                        {
                            Id = new Guid("9f9b81ea-2ea2-4193-8b99-b8a40bc476ec"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9")
                        },
                        new
                        {
                            Id = new Guid("30b828ce-4553-46e9-843e-f3a7a0650ff8"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("7f4d5ddb-625b-41d8-96b6-2d7a4fde8082")
                        },
                        new
                        {
                            Id = new Guid("3eeb6bb0-00ab-485d-8765-741d5d4bc457"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("0b24f943-112f-4581-9012-66c22ebc78e4")
                        },
                        new
                        {
                            Id = new Guid("5eafce69-c9c9-48f5-abe3-d1523a21d5ed"),
                            BurgerId = new Guid("a738121d-1589-479c-943b-a749dae68ca3"),
                            Extra = false,
                            ToppingId = new Guid("7072d592-d83e-4370-8231-968557a1a7fa")
                        },
                        new
                        {
                            Id = new Guid("2e8abd00-2fad-4f0f-b3ad-f968c0979a97"),
                            BurgerId = new Guid("6f02afab-b32d-486c-b2df-163258d95e9d"),
                            Extra = false,
                            ToppingId = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9")
                        },
                        new
                        {
                            Id = new Guid("e72b4cf0-58a8-4d19-bddb-c79f1d7e8ece"),
                            BurgerId = new Guid("6f02afab-b32d-486c-b2df-163258d95e9d"),
                            Extra = false,
                            ToppingId = new Guid("7f4d5ddb-625b-41d8-96b6-2d7a4fde8082")
                        },
                        new
                        {
                            Id = new Guid("243cc9a2-c896-41f6-8511-7356b347d517"),
                            BurgerId = new Guid("6f02afab-b32d-486c-b2df-163258d95e9d"),
                            Extra = false,
                            ToppingId = new Guid("0b24f943-112f-4581-9012-66c22ebc78e4")
                        },
                        new
                        {
                            Id = new Guid("1faf850c-cb6f-4cee-b8b1-0c807734d201"),
                            BurgerId = new Guid("6f02afab-b32d-486c-b2df-163258d95e9d"),
                            Extra = false,
                            ToppingId = new Guid("7072d592-d83e-4370-8231-968557a1a7fa")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c34d729-1fa5-48a5-b906-b3655574584c"),
                            BurgerId = new Guid("f81240b9-aa7f-494b-b664-7346fc2ad80f"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("274c5aa5-e7b6-4cca-a393-c3bf04940566"),
                            BurgerId = new Guid("e4f64e55-479a-4d63-953f-5683e607cfb9"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba57c9fc-fb84-459f-90b1-8380cf56326a"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("1492c598-9bd6-4dba-86fc-c5e71c8a7248"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("abff2c50-3cba-49b3-9309-36b1404a411c"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("891ac059-a0a5-41b0-a824-29938804dbeb"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("3fe4669f-fd11-416a-8ffe-41e9016e1c81"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("f34313a1-7d24-48a9-bb58-4b3d7a69f11a"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            CustomerId = new Guid("456b5e22-26e6-4200-9ecf-9a036b938e43"),
                            EmployeeId = new Guid("998bcb41-c23d-4f6a-853b-69313960a3f0"),
                            OrderTime = new DateTime(2023, 11, 2, 10, 31, 49, 500, DateTimeKind.Local).AddTicks(1246),
                            OrderTypeId = new Guid("2a2c5b0e-960e-4c19-857f-7e9665a2cc0d")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCombos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bffea8fd-0443-4688-84c6-72b047458059"),
                            ComboId = new Guid("1c34d729-1fa5-48a5-b906-b3655574584c"),
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51316ef7-729b-41a8-82d1-db3bb7d41b56"),
                            DrinkId = new Guid("abff2c50-3cba-49b3-9309-36b1404a411c"),
                            IsInCombo = false,
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 1,
                            SizeId = new Guid("95b1d883-384b-4aba-a173-6752561119bf")
                        },
                        new
                        {
                            Id = new Guid("4f279886-9183-44a2-a6e2-15be8d43f62b"),
                            DrinkId = new Guid("ba57c9fc-fb84-459f-90b1-8380cf56326a"),
                            IsInCombo = true,
                            OrderComboId = new Guid("bffea8fd-0443-4688-84c6-72b047458059"),
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 1,
                            SizeId = new Guid("95b1d883-384b-4aba-a173-6752561119bf")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a91b352-0da2-4419-b829-785d00618b79"),
                            IsInCombo = false,
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 1,
                            SideId = new Guid("5ea5dca4-dc78-440f-bd4c-429385ef51bb"),
                            SizeId = new Guid("8b3db8eb-5222-4e03-98c5-1e5f9dd1bce3")
                        },
                        new
                        {
                            Id = new Guid("2e436795-c55b-4478-aafd-7f5ceb4275ab"),
                            IsInCombo = true,
                            OrderComboId = new Guid("bffea8fd-0443-4688-84c6-72b047458059"),
                            OrderId = new Guid("3400979e-11d9-4c92-87be-5d834bd13f79"),
                            Quantity = 1,
                            SideId = new Guid("012f0feb-3296-44ea-a4b1-576d113b1340"),
                            SizeId = new Guid("8b3db8eb-5222-4e03-98c5-1e5f9dd1bce3")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a2c5b0e-960e-4c19-857f-7e9665a2cc0d"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("9f1eb783-0672-496c-addf-20e1b3e0f4b5"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("10c74722-5f4b-43c8-8e45-10f7fa6e1337"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ea5dca4-dc78-440f-bd4c-429385ef51bb"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("cfbc12c7-11aa-44a1-ae21-8009ea16b079"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("012f0feb-3296-44ea-a4b1-576d113b1340"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("429029e2-e30f-4561-a6e3-7bd4a2041b37"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("37a50b38-79d1-49ec-8f28-96f36b2ad42b"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2279d7a-4f23-4859-be0e-595a7d4bbf6e"),
                            IsDeleted = false,
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("95b1d883-384b-4aba-a173-6752561119bf"),
                            IsDeleted = false,
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("8b3db8eb-5222-4e03-98c5-1e5f9dd1bce3"),
                            IsDeleted = false,
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a605c9b7-baa8-4163-b25f-8de28dc5992c"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("c19344f4-80ff-485b-b006-efbce38de108"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("fd0e3766-f26d-4465-a808-b4b262045b9a"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("5270cf4d-0a22-49be-b958-5e1459fa291b"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("0b24f943-112f-4581-9012-66c22ebc78e4"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("7f4d5ddb-625b-41d8-96b6-2d7a4fde8082"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("6ed7f3f2-a11e-4564-bd0a-5577a83a49a8"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("91647c8a-1ec9-47f5-8e15-2f9d51b078e9"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("7072d592-d83e-4370-8231-968557a1a7fa"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("eb1a74ee-a261-49ec-bd43-3a23ef5fc549"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d74b409-598a-422a-b8a0-04dc96672e02"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("104134bb-0f8b-4411-b05b-177cd9eb2763"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "24ceef3f-0e65-40b8-b8f6-410b3f6b7265",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("998bcb41-c23d-4f6a-853b-69313960a3f0"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "a951093b-fa02-4609-a877-d1f9658445cc",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("2f88f2d7-c6a2-409e-87af-cfd06325a611"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "9cd5c5bd-b28a-4992-ae75-e87083c3c74a",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("456b5e22-26e6-4200-9ecf-9a036b938e43"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "c7a73dd3-c874-4587-be77-80161a4cea88",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "129487e7-87d4-463b-b789-843918ac3f2e",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "986d0672-bb49-497e-8e19-c01af8a18a9c",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBPgc43QdAWbcotFOopa7s8DJj36W2/DzUH1adAcqDaILkN7Qzc5bfKfRYbHBnf4DQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94d58bb3-b9ef-4989-a24f-d49a669c1d39",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "24ceef3f-0e65-40b8-b8f6-410b3f6b7265",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58c4f36d-2266-40aa-9766-8ac21172cc60",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIewWAu6CYUdgLedqkX55DmmD2eTudVuF2WO3VmKgMpFjnPaRZtT2IRSt3cB61U9kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2adaa6c7-7f7d-40ab-83df-ac6ce20b0794",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "9cd5c5bd-b28a-4992-ae75-e87083c3c74a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7ba70de-8b69-47b7-bfa7-5c476041642b",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEE0HIhs96961Qp0+4OePDf+keYqs07dRemQX305R3L1E4cZTffwoKATNV+wV3SaQaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e26fad8-30fc-41da-9a73-389dc3ffc0c3",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "a951093b-fa02-4609-a877-d1f9658445cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d15597c-884f-493c-a36e-8f64c4fd6623",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKtSbV/tBxksqQ0l7T0TevrQ9jTBTpvvGDX73aq38nT9TVWIdg5hB+Ac81TDKBi48A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12f34006-f08d-42c9-aa66-0272d0eccc7e",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "c7a73dd3-c874-4587-be77-80161a4cea88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9952ca6a-4baa-4d91-a559-f2417052bdbb",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMSKoIi5fH98Hy7LVnL0c3Lsmwq8IVoa5Mm2AFYMRhqfjs+UU+PXXqHWe6BsyyP2sQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71fd9f96-5895-4984-b0ec-c94d4b10b3ae",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "9cd5c5bd-b28a-4992-ae75-e87083c3c74a",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "24ceef3f-0e65-40b8-b8f6-410b3f6b7265",
                            RoleId = "129487e7-87d4-463b-b789-843918ac3f2e"
                        },
                        new
                        {
                            UserId = "a951093b-fa02-4609-a877-d1f9658445cc",
                            RoleId = "129487e7-87d4-463b-b789-843918ac3f2e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("Burger")
                        .HasForeignKey("KrustyKrab.Models.Burger", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("OrderCombos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderDrink")
                        .HasForeignKey("KrustyKrab.Models.OrderDrink", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderSide")
                        .HasForeignKey("KrustyKrab.Models.OrderSide", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("Sides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Drinks");

                    b.Navigation("OrderCombos");

                    b.Navigation("Sides");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Navigation("Burger");

                    b.Navigation("OrderDrink");

                    b.Navigation("OrderSide");
                });
#pragma warning restore 612, 618
        }
    }
}
