// <auto-generated />
using System;
using KrustyKrab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrustyKrab.Migrations
{
    [DbContext(typeof(KrustyKrabDbContext))]
    partial class KrustyKrabDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            IsDeleted = false,
                            IsInCombo = false,
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            IsDeleted = false,
                            IsInCombo = false,
                            Name = "double krabby patty",
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("ae27d355-d915-4f9c-a1d9-6565327430ec"),
                            IsDeleted = false,
                            IsInCombo = true,
                            OrderComboId = new Guid("bea939be-6758-4a00-8a36-258b6e7d2b7f"),
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Extra")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("ToppingId");

                    b.ToTable("BurgerToppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c4fa926-f0ec-4fe0-9d6a-dddb92e5aec2"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("fdec8d52-9348-4f19-8798-0039fc604bcc")
                        },
                        new
                        {
                            Id = new Guid("677469e1-4aae-41b5-a25d-ead72d75b0c4"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("13a06784-a65f-439d-92d5-c872c6e07816")
                        },
                        new
                        {
                            Id = new Guid("ea9c3d28-ac11-4a5f-9526-5bfd4e9c8064"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("58164af6-bf37-4877-87e5-916fdf921b06")
                        },
                        new
                        {
                            Id = new Guid("4c4c2b09-0cc9-420e-bda5-3eb11416fa99"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("2b3e74e0-fac2-4f14-b1ba-a23f534cf9c4")
                        },
                        new
                        {
                            Id = new Guid("2f1cee90-61d9-4937-9b1e-00c017a4e59b"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("8af0a817-f4f7-4b58-bb37-35f5cf507569")
                        },
                        new
                        {
                            Id = new Guid("adba2703-0439-49e4-bc0c-bb2254b34428"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319")
                        },
                        new
                        {
                            Id = new Guid("8ad04996-eb8f-4ef7-bbea-e21a85922e64"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319")
                        },
                        new
                        {
                            Id = new Guid("934db118-2ea8-4278-9051-03b670be3237"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("746c09e1-4e26-4380-8fb8-a0aa99e37d64")
                        },
                        new
                        {
                            Id = new Guid("9881a77f-d0c8-4c43-aa99-e07c3cc143d1"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("9e821c8e-06b5-4b1e-9fb0-bac3dee20e16")
                        },
                        new
                        {
                            Id = new Guid("6c9beb34-4712-449c-af74-b343f17e4d78"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("2e990b5f-d669-4de3-95d1-5984ee68d640")
                        },
                        new
                        {
                            Id = new Guid("c19c46f8-2a90-48d5-8ed9-6377d04af4f1"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Extra = false,
                            ToppingId = new Guid("7ee0b60b-6297-497e-9cb2-60457906e049")
                        },
                        new
                        {
                            Id = new Guid("b0fef76e-dbb6-43c8-915e-ebc29c013cf2"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("fdec8d52-9348-4f19-8798-0039fc604bcc")
                        },
                        new
                        {
                            Id = new Guid("e07dc760-72eb-4567-a36f-107e21461442"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("13a06784-a65f-439d-92d5-c872c6e07816")
                        },
                        new
                        {
                            Id = new Guid("27212abb-620d-40af-86d0-939cfb9cbe72"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("58164af6-bf37-4877-87e5-916fdf921b06")
                        },
                        new
                        {
                            Id = new Guid("ce1abafe-685f-4cf2-94c8-fcdbeb1898ea"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("2b3e74e0-fac2-4f14-b1ba-a23f534cf9c4")
                        },
                        new
                        {
                            Id = new Guid("21bbcb4f-b0ce-4dce-86a8-9b6dca8269d7"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("8af0a817-f4f7-4b58-bb37-35f5cf507569")
                        },
                        new
                        {
                            Id = new Guid("571330f4-7298-4e6d-a8ca-65fd050b49ef"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319")
                        },
                        new
                        {
                            Id = new Guid("d41b7348-2f37-416a-a281-63d5208bceff"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("746c09e1-4e26-4380-8fb8-a0aa99e37d64")
                        },
                        new
                        {
                            Id = new Guid("1d20b778-bea6-4a86-9f02-5f4e2f364864"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("9e821c8e-06b5-4b1e-9fb0-bac3dee20e16")
                        },
                        new
                        {
                            Id = new Guid("ee33d4c8-d1ef-4714-a34a-cd51c02c1cbe"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("2e990b5f-d669-4de3-95d1-5984ee68d640")
                        },
                        new
                        {
                            Id = new Guid("cac63f52-4a07-4c76-a0d7-6d9b6a2a0e54"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Extra = false,
                            ToppingId = new Guid("7ee0b60b-6297-497e-9cb2-60457906e049")
                        },
                        new
                        {
                            Id = new Guid("53ba471c-daa2-40f8-bdae-653c0724ef22"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("fdec8d52-9348-4f19-8798-0039fc604bcc")
                        },
                        new
                        {
                            Id = new Guid("20bc9275-3613-4bc1-8a1b-9411997e909c"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("13a06784-a65f-439d-92d5-c872c6e07816")
                        },
                        new
                        {
                            Id = new Guid("6e49811e-d143-4883-bf11-6b433ea8dd7b"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("58164af6-bf37-4877-87e5-916fdf921b06")
                        },
                        new
                        {
                            Id = new Guid("27787015-0fe6-4447-9a22-c7d9444c51f7"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("2b3e74e0-fac2-4f14-b1ba-a23f534cf9c4")
                        },
                        new
                        {
                            Id = new Guid("87cbbaad-484b-4e89-8dda-90ccbe2b12d2"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("8af0a817-f4f7-4b58-bb37-35f5cf507569")
                        },
                        new
                        {
                            Id = new Guid("48921eda-b0da-4f7e-b2c3-567f023b263c"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319")
                        },
                        new
                        {
                            Id = new Guid("0ed67491-cd37-4124-b070-4cf4d1042790"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319")
                        },
                        new
                        {
                            Id = new Guid("c2f32e60-2eef-41be-b9a8-48ae9f55ca73"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("746c09e1-4e26-4380-8fb8-a0aa99e37d64")
                        },
                        new
                        {
                            Id = new Guid("98d7efff-5b5d-435f-a0dc-3f48461eff80"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("9e821c8e-06b5-4b1e-9fb0-bac3dee20e16")
                        },
                        new
                        {
                            Id = new Guid("4a4ec9eb-da7f-4758-9384-96101152ddc4"),
                            BurgerId = new Guid("eb4cec0c-e729-44db-81d6-32fb5915a1fe"),
                            Extra = false,
                            ToppingId = new Guid("2e990b5f-d669-4de3-95d1-5984ee68d640")
                        },
                        new
                        {
                            Id = new Guid("5f83dd17-7c87-49f6-95ad-621b40e1aea4"),
                            BurgerId = new Guid("ae27d355-d915-4f9c-a1d9-6565327430ec"),
                            Extra = false,
                            ToppingId = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319")
                        },
                        new
                        {
                            Id = new Guid("68ecdc2c-58ce-438a-9097-13342810cf6b"),
                            BurgerId = new Guid("ae27d355-d915-4f9c-a1d9-6565327430ec"),
                            Extra = false,
                            ToppingId = new Guid("746c09e1-4e26-4380-8fb8-a0aa99e37d64")
                        },
                        new
                        {
                            Id = new Guid("7682cdf4-c267-45b0-92a5-492863caecff"),
                            BurgerId = new Guid("ae27d355-d915-4f9c-a1d9-6565327430ec"),
                            Extra = false,
                            ToppingId = new Guid("9e821c8e-06b5-4b1e-9fb0-bac3dee20e16")
                        },
                        new
                        {
                            Id = new Guid("e6b102b9-48b3-4e76-8940-42d7b6aeb217"),
                            BurgerId = new Guid("ae27d355-d915-4f9c-a1d9-6565327430ec"),
                            Extra = false,
                            ToppingId = new Guid("2e990b5f-d669-4de3-95d1-5984ee68d640")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BurgerId")
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4c5dd30-39c1-415e-8476-1ecd507edd48"),
                            BurgerId = new Guid("a1f38fec-b768-4aed-a728-ee13beb503a1"),
                            Discount = -1f,
                            IsDeleted = false,
                            Name = "krabby patty combo"
                        },
                        new
                        {
                            Id = new Guid("5305006c-549d-4365-be05-15e12b1827bd"),
                            BurgerId = new Guid("149d0c69-43fc-471c-8877-941cf5920410"),
                            Discount = -1.25f,
                            IsDeleted = false,
                            Name = "double krabby patty combo"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b05aada-95a6-4f30-9251-e73d0bf37d18"),
                            IsDeleted = false,
                            Name = "dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("12eb1379-42fd-4fa5-b701-a3ac6b168754"),
                            IsDeleted = false,
                            Name = "diet dr. kelp",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("671b8ce1-e876-494c-92fc-b5e085ff8667"),
                            IsDeleted = false,
                            Name = "red tide",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("1235e044-45ba-43d8-b3e7-a4ad83148c5f"),
                            IsDeleted = false,
                            Name = "kelp shake",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = new Guid("f720ca5f-b33b-4204-aa59-6365c300a3c2"),
                            IsDeleted = false,
                            Name = "seafoam soda",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("1eedb094-f9c2-4b93-80cf-b7152edfdc08"),
                            IsDeleted = false,
                            Name = "water",
                            Price = 0.1f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            CustomerId = new Guid("6c7d9f7d-9e7e-499c-a51e-c5dd5770f680"),
                            EmployeeId = new Guid("df80484a-5b4c-4472-9645-2affc39df911"),
                            OrderTime = new DateTime(2023, 11, 2, 12, 32, 46, 315, DateTimeKind.Local).AddTicks(8147),
                            OrderTypeId = new Guid("c9688797-03ea-48b8-b958-004b1260821c")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCombos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bea939be-6758-4a00-8a36-258b6e7d2b7f"),
                            ComboId = new Guid("b4c5dd30-39c1-415e-8476-1ecd507edd48"),
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderDrinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("588352dd-fbf1-43cf-aef7-f93ad6974946"),
                            DrinkId = new Guid("671b8ce1-e876-494c-92fc-b5e085ff8667"),
                            IsInCombo = false,
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 1,
                            SizeId = new Guid("da225b39-508e-466d-8276-0fcbbdd04aaf")
                        },
                        new
                        {
                            Id = new Guid("b8647e77-2100-4daf-a910-63619544c046"),
                            DrinkId = new Guid("4b05aada-95a6-4f30-9251-e73d0bf37d18"),
                            IsInCombo = true,
                            OrderComboId = new Guid("bea939be-6758-4a00-8a36-258b6e7d2b7f"),
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 1,
                            SizeId = new Guid("da225b39-508e-466d-8276-0fcbbdd04aaf")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInCombo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OrderComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SideId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderComboId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("SideId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderSides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e503d86b-3af0-4ec6-b8a0-e671b207c638"),
                            IsInCombo = false,
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 1,
                            SideId = new Guid("221df44a-ff9c-486c-9733-2b549d3733e4"),
                            SizeId = new Guid("74759769-9f69-4f3b-8421-47d2899d0598")
                        },
                        new
                        {
                            Id = new Guid("f2756abf-eb62-4e2e-9f09-65d14fa5acf1"),
                            IsInCombo = true,
                            OrderComboId = new Guid("bea939be-6758-4a00-8a36-258b6e7d2b7f"),
                            OrderId = new Guid("c1b3b05e-e7e6-49dc-80c0-a93cf46a130a"),
                            Quantity = 1,
                            SideId = new Guid("a48e7262-0e2b-466f-9666-0ee07888d06b"),
                            SizeId = new Guid("74759769-9f69-4f3b-8421-47d2899d0598")
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9688797-03ea-48b8-b958-004b1260821c"),
                            Name = "here"
                        },
                        new
                        {
                            Id = new Guid("0ecfa89c-a143-4e86-aeab-7af9d6333c9d"),
                            Name = "togo"
                        },
                        new
                        {
                            Id = new Guid("3cd12cda-035d-4ad8-b574-53293c44a4d5"),
                            Name = "pickup"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Side", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("221df44a-ff9c-486c-9733-2b549d3733e4"),
                            IsDeleted = false,
                            Name = "coral bits",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("ebcff6d6-7334-490e-b61f-e59ceba61637"),
                            IsDeleted = false,
                            Name = "barnacle rings",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("a48e7262-0e2b-466f-9666-0ee07888d06b"),
                            IsDeleted = false,
                            Name = "kelp fries",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("a18931b1-a4f0-424d-b465-5dccb31f56cf"),
                            IsDeleted = false,
                            Name = "oyster skins",
                            Price = 1.25f
                        },
                        new
                        {
                            Id = new Guid("9a43d59a-40be-4006-83a4-4c31ecc71808"),
                            IsDeleted = false,
                            Name = "seaweed salad",
                            Price = 2f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortHand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3320c70-37cb-44a0-bef5-fdb4b6e73b9c"),
                            IsDeleted = false,
                            Name = "small",
                            Price = 0f,
                            ShortHand = "sm"
                        },
                        new
                        {
                            Id = new Guid("da225b39-508e-466d-8276-0fcbbdd04aaf"),
                            IsDeleted = false,
                            Name = "medium",
                            Price = 0.2f,
                            ShortHand = "md"
                        },
                        new
                        {
                            Id = new Guid("74759769-9f69-4f3b-8421-47d2899d0598"),
                            IsDeleted = false,
                            Name = "large",
                            Price = 0.45f,
                            ShortHand = "lg"
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.Topping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13a06784-a65f-439d-92d5-c872c6e07816"),
                            IsDeleted = false,
                            Name = "lettuce",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("58164af6-bf37-4877-87e5-916fdf921b06"),
                            IsDeleted = false,
                            Name = "tomato",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("2b3e74e0-fac2-4f14-b1ba-a23f534cf9c4"),
                            IsDeleted = false,
                            Name = "pickle",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("8af0a817-f4f7-4b58-bb37-35f5cf507569"),
                            IsDeleted = false,
                            Name = "onion",
                            Price = 0.05f
                        },
                        new
                        {
                            Id = new Guid("9e821c8e-06b5-4b1e-9fb0-bac3dee20e16"),
                            IsDeleted = false,
                            Name = "mustard",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("746c09e1-4e26-4380-8fb8-a0aa99e37d64"),
                            IsDeleted = false,
                            Name = "ketchup",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("fdec8d52-9348-4f19-8798-0039fc604bcc"),
                            IsDeleted = false,
                            Name = "secret sauce",
                            Price = 0f
                        },
                        new
                        {
                            Id = new Guid("a4b98006-dbb8-4aa1-b592-4082cddce319"),
                            IsDeleted = false,
                            Name = "patty",
                            Price = 1f
                        },
                        new
                        {
                            Id = new Guid("2e990b5f-d669-4de3-95d1-5984ee68d640"),
                            IsDeleted = false,
                            Name = "bun",
                            Price = 0.2f
                        },
                        new
                        {
                            Id = new Guid("7ee0b60b-6297-497e-9cb2-60457906e049"),
                            IsDeleted = false,
                            Name = "sea cheese",
                            Price = 0.25f
                        });
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f732039d-8a4b-495f-a372-41aa9ee917df"),
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = new Guid("23e62dd6-e434-429b-b163-52db44dd31ad"),
                            Address = "124 Conch Street",
                            FirstName = "SpongeBob",
                            IdentityUserId = "b611e18b-602f-40a5-bcc3-c67ab86cb19c",
                            LastName = "SquarePants"
                        },
                        new
                        {
                            Id = new Guid("df80484a-5b4c-4472-9645-2affc39df911"),
                            Address = "122 Conch Street",
                            FirstName = "Squidward",
                            IdentityUserId = "d5cc5981-027c-435a-abd2-b31423ae24bc",
                            LastName = "Tentacles"
                        },
                        new
                        {
                            Id = new Guid("92f50309-ce8b-4351-af59-dcf7e3d2a1b6"),
                            Address = "3541 Anchor Way",
                            FirstName = "Eugene",
                            IdentityUserId = "58e2c2d7-3f88-4315-817c-ebc672c8981d",
                            LastName = "Krabs"
                        },
                        new
                        {
                            Id = new Guid("6c7d9f7d-9e7e-499c-a51e-c5dd5770f680"),
                            Address = "120 Conch Street",
                            FirstName = "Patrick",
                            IdentityUserId = "7038488f-6630-475f-bc11-d4217b6fe8c4",
                            LastName = "Star"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "e774cbd9-8dec-4672-bc59-2397574b7f34",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "974b549e-ef8b-4008-87a5-779774a69e7b",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELtA7X/5Ms87OrPBz1KmS3WvsW79j+6OJuDIGgQVe+tQPekEji26dgQnU/BRfFSsQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "850f7177-a363-4d0f-b0e2-c418432fda11",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "b611e18b-602f-40a5-bcc3-c67ab86cb19c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "023d5504-68b2-45d2-b1ef-269f11f79d79",
                            Email = "jellyfanatic12@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFfnE1LTW0SM4B070XUuzz6A+RlJtm2wQpy7g2B71CiXMmiFw6zsXDyI0H47758kKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb2de5db-8786-4bde-8b30-abbdb1d2e53b",
                            TwoFactorEnabled = false,
                            UserName = "ssquarepants"
                        },
                        new
                        {
                            Id = "58e2c2d7-3f88-4315-817c-ebc672c8981d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4d3827d-6c9e-4f69-86d0-d6ca7cb985b1",
                            Email = "saltydog@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDPrdLtwP62CHsy2pBgdjSnEmCB0SZeciY1ILdCJFjvJdqIF1CyOvUehtxwIs3WzmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "260e84aa-4097-4c78-92d1-53f436c6d3b3",
                            TwoFactorEnabled = false,
                            UserName = "ekrabs"
                        },
                        new
                        {
                            Id = "d5cc5981-027c-435a-abd2-b31423ae24bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64cf7451-2468-44a9-a871-423afeebc5ed",
                            Email = "stentacles2@seamail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDbRIcmffPanuAgPy9xx/AIA2fCnMDivHcHLIE4fBOkrpi9pmwcbG/r6HCNbErtcYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8949604f-9c63-4c4f-a3e2-96d724b12c7d",
                            TwoFactorEnabled = false,
                            UserName = "stentacles"
                        },
                        new
                        {
                            Id = "7038488f-6630-475f-bc11-d4217b6fe8c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7335ede7-4ba8-4ba9-bb75-e444865b7d58",
                            Email = "patrickstar@goofygoober.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAED4Lv0HI75Pf0f4slACqlaFDItlnDhfB70TYLVqU2eZzEaxKMrtPUaFSn3ZnIUoBew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a761cf02-e083-473b-8d88-0efafb4582ee",
                            TwoFactorEnabled = false,
                            UserName = "pstar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "58e2c2d7-3f88-4315-817c-ebc672c8981d",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "b611e18b-602f-40a5-bcc3-c67ab86cb19c",
                            RoleId = "e774cbd9-8dec-4672-bc59-2397574b7f34"
                        },
                        new
                        {
                            UserId = "d5cc5981-027c-435a-abd2-b31423ae24bc",
                            RoleId = "e774cbd9-8dec-4672-bc59-2397574b7f34"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("Burger")
                        .HasForeignKey("KrustyKrab.Models.Burger", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KrustyKrab.Models.BurgerTopping", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", null)
                        .WithMany("BurgerToppings")
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("KrustyKrab.Models.Combo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.HasOne("KrustyKrab.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KrustyKrab.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.HasOne("KrustyKrab.Models.Order", null)
                        .WithMany("OrderCombos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderDrink", b =>
                {
                    b.HasOne("KrustyKrab.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderDrink")
                        .HasForeignKey("KrustyKrab.Models.OrderDrink", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderSide", b =>
                {
                    b.HasOne("KrustyKrab.Models.OrderCombo", null)
                        .WithOne("OrderSide")
                        .HasForeignKey("KrustyKrab.Models.OrderSide", "OrderComboId");

                    b.HasOne("KrustyKrab.Models.Order", "Order")
                        .WithMany("OrderSides")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KrustyKrab.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Side");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("KrustyKrab.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KrustyKrab.Models.Burger", b =>
                {
                    b.Navigation("BurgerToppings");
                });

            modelBuilder.Entity("KrustyKrab.Models.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("OrderCombos");

                    b.Navigation("OrderDrinks");

                    b.Navigation("OrderSides");
                });

            modelBuilder.Entity("KrustyKrab.Models.OrderCombo", b =>
                {
                    b.Navigation("Burger");

                    b.Navigation("OrderDrink");

                    b.Navigation("OrderSide");
                });
#pragma warning restore 612, 618
        }
    }
}
